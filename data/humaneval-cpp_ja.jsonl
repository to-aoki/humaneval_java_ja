{"name": "HumanEval_23_strlen", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u8fd4\u3059\u3002\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_23_strlen.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\")) == (9));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_23_strlen", "test": "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\")) == (9));\n}\n"}
{"name": "HumanEval_89_encrypt", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u3092\u5f15\u6570\u306b\u53d6\u308a\u3001\u56de\u8ee2\u3055\u305b\u305f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u6697\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570encrypt\u3092\u4f5c\u6210\u3059\u308b\u3002\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u56de\u8ee2\u3055\u305b\u308b\u3002\n// \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306f\u3001\u6587\u5b57\u304c2\u3064\u4e0b\u306b2\u639b\u3051\u3055\u308c\u308b\u3088\u3046\u306b\u56de\u8ee2\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u4f8b\u3048\u3070:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_89_encrypt.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_89_encrypt", "test": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n"}
{"name": "HumanEval_95_check_dict_case", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30de\u30c3\u30d7\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u3059\u3079\u3066\u306e\u30ad\u30fc\u304c\u5c0f\u6587\u5b57\u306e\u6587\u5b57\u5217\u3067\u3042\u308c\u3070\u771f\u3092\u3001\n// \u3059\u3079\u3066\u306e\u30ad\u30fc\u304c\u5927\u6587\u5b57\u306e\u6587\u5b57\u5217\u3067\u3042\u308c\u3070\u507d\u3092\u8fd4\u3059\u3002\n// \u3053\u306e\u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30de\u30c3\u30d7\u304c\u7a7a\u306e\u5834\u5408\u306ffalse\u3092\u8fd4\u3059\u3079\u304d\u3067\u3059\u3002\n// \u4f8b:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_95_check_dict_case.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_95_check_dict_case", "test": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n"}
{"name": "HumanEval_85_add", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u7a7a\u3067\u306a\u3044\u6574\u6570\u306evector lst\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5947\u6570\u6dfb\u5b57\u306b\u3042\u308b\u5076\u6570\u8981\u7d20\u3092\u52a0\u7b97\u3059\u308b\u3002\n// \u4f8b:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_85_add.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_85_add", "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));\n}\n"}
{"name": "HumanEval_140_fix_spaces", "language": "cpp", "prompt": "#include<assert.h>\n// \u6587\u5b57\u5217\u30c6\u30ad\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u305d\u306e\u4e2d\u306e\u3059\u3079\u3066\u306e\u30b9\u30da\u30fc\u30b9\u3092\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u306b\u7f6e\u304d\u63db\u3048\u308b\u3002\n// \u6587\u5b57\u5217\u306b3\u3064\u4ee5\u4e0a\u306e\u9023\u7d9a\u3057\u305f\u30b9\u30da\u30fc\u30b9\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u9023\u7d9a\u3057\u305f\u3059\u3079\u3066\u306e\u30b9\u30da\u30fc\u30b9\u3092\"-\"\u306b\u7f6e\u304d\u63db\u3048\u308b\u3002\n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_140_fix_spaces.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_140_fix_spaces", "test": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"}
{"name": "HumanEval_63_fibfib", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// FibFib\u6570\u5217\u306f\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306b\u4f3c\u305f\u6570\u5217\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\uff1a\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// fibfib\u6570\u5217\u306en\u756a\u76ee\u306e\u8981\u7d20\u3092\u52b9\u7387\u7684\u306b\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_63_fibfib.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_63_fibfib", "test": "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n"}
{"name": "HumanEval_151_double_the_difference", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6570\u5024\u306e\u914d\u5217\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u914d\u5217\u30ea\u30b9\u30c8\u4e2d\u306e\u5947\u6570\u306e\u6570\u5024\u306e2\u4e57\u548c\u3092\u8fd4\u3059\u3002\n// \u8ca0\u306e\u6570\u3084\u6574\u6570\u3067\u306a\u3044\u6570\u306f\u7121\u8996\u3059\u308b\u3002\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_151_double_the_difference.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_151_double_the_difference", "test": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));\n}\n"}
{"name": "HumanEval_22_filter_integers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u4efb\u610f\u306evector\u306b\u5bfe\u3057\u3066\u3001\u6574\u6570\u5024\u306e\u307f\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_22_filter_integers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_22_filter_integers", "test": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"}
{"name": "HumanEval_41_car_race_collision", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5b8c\u5168\u306a\u76f4\u7dda\u3067\u7121\u9650\u306b\u9577\u3044\u9053\u8def\u3092\u60f3\u50cf\u3057\u3066\u307b\u3057\u3044\u3002\n// n\u53f0\u306e\u8eca\u304c\u5de6\u304b\u3089\u53f3\u306b\u5411\u304b\u3063\u3066\u8d70\u3063\u3066\u3044\u308b\u3002\u540c\u6642\u306b\u3001\u5225\u306en\u53f0\u306e\u8eca\u304c\u53f3\u304b\u3089\u5de6\u306b\u5411\u304b\u3063\u3066\u8d70\u3063\u3066\u3044\u308b\u3002\n// 2\u7d44\u306e\u8eca\u306f\u3001\u6700\u521d\u306f\u4e92\u3044\u306b\u975e\u5e38\u306b\u96e2\u308c\u3066\u3044\u308b\u3002 \u3059\u3079\u3066\u306e\u8eca\u306f\u540c\u3058\u901f\u5ea6\u3067\u52d5\u304f\u3002\n// \u5de6\u304b\u3089\u53f3\u306b\u52d5\u3044\u3066\u3044\u308b\u8eca\u304c\u53f3\u304b\u3089\u5de6\u306b\u52d5\u3044\u3066\u3044\u308b\u8eca\u306b\u3076\u3064\u304b\u308b\u3068\u30012\u53f0\u306e\u8eca\u306f\u885d\u7a81\u3059\u308b\u3068\u3044\u3046\u3002\n// \u3057\u304b\u3057\u3001\u8eca\u306f\u7121\u9650\u306b\u9811\u4e08\u3067\u5f37\u3044\u306e\u3067\u3001\u885d\u7a81\u3057\u306a\u304b\u3063\u305f\u304b\u306e\u3088\u3046\u306b\u8ecc\u8de1\u3092\u63cf\u304d\u306a\u304c\u3089\u52d5\u304d\u7d9a\u3051\u308b\u3002\n// \u3053\u306e\u95a2\u6570\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u885d\u7a81\u306e\u56de\u6570\u3092\u51fa\u529b\u3059\u308b\u3002\nlong car_race_collision(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_41_car_race_collision.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_41_car_race_collision", "test": "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"}
{"name": "HumanEval_17_parse_music", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u306e\u5165\u529b\u306f\u3001\u7279\u5225\u306aASCII\u5f62\u5f0f\u306e\u97f3\u7b26\u3092\u8868\u3059\u6587\u5b57\u5217\u3067\u3059\u3002\n// \u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u3053\u306e\u6587\u5b57\u5217\u3092\u89e3\u6790\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u97f3\u7b26\u304c\u4f55\u62cd\u7d9a\u304f\u304b\u306b\u5bfe\u5fdc\u3059\u308b\u6574\u6570\u306evector\u3092\u8fd4\u3059\u3053\u3068\u3067\u3059\u3002\n// \u4ee5\u4e0b\u306b\u51e1\u4f8b\u3092\u793a\u3059\uff1a\n// 'o' - \u5168\u97f3\u7b26\u30014\u62cd\u7d9a\u304f\u3002\n// 'o|' - 2\u5206\u97f3\u7b26\u30012\u62cd\u7d9a\u304f\u3002\n// '.|' - 4\u5206\u97f3\u7b26\u30011\u62cd\u7d9a\u304f\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_17_parse_music.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_17_parse_music", "test": "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n"}
{"name": "HumanEval_79_decimal_to_binary", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3042\u306a\u305f\u306f10\u9032\u6570\u3067\u6570\u5024\u3092\u4e0e\u3048\u3089\u308c\u3001\u305d\u308c\u30922\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u3002\n// \u95a2\u6570\u306f\u3001\u5404\u6587\u5b57\u304c2\u9032\u6570\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u306f'0'\u307e\u305f\u306f'1'\u3067\u3042\u308b\u3002\n// \u6587\u5b57\u5217\u306e\u6700\u521d\u3068\u6700\u5f8c\u306b\u306f'db'\u3068\u3044\u3046\u4f59\u5206\u306a\u6587\u5b57\u304c\u3042\u308a\u307e\u3059\u3002\n// 'db'\u306f\u66f8\u5f0f\u3092\u52a9\u3051\u308b\u305f\u3081\u306b\u3042\u308a\u307e\u3059\u3002\n// \u4f8b:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_79_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_79_decimal_to_binary", "test": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"}
{"name": "HumanEval_14_all_prefixes", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5165\u529b\u6587\u5b57\u5217\u306e\u63a5\u982d\u8f9e\u3092\u3001\u77ed\u3044\u3082\u306e\u304b\u3089\u9577\u3044\u3082\u306e\u307e\u3067\u3059\u3079\u3066vector\u3067\u8fd4\u3059\u3002\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_14_all_prefixes.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_14_all_prefixes", "test": "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"}
{"name": "HumanEval_53_add", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u6570\u5024x\u3068y\u3092\u8db3\u3059\u3002\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_53_add.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1)) == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3)) == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (5)) == (12));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_53_add", "test": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1)) == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3)) == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (5)) == (12));\n}\n"}
{"name": "HumanEval_159_eat", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3042\u306a\u305f\u306f\u304a\u8179\u3092\u7a7a\u304b\u305b\u305f\u30a6\u30b5\u30ae\u3067\u3001\u3059\u3067\u306b\u4e00\u5b9a\u6570\u306e\u30cb\u30f3\u30b8\u30f3\u3092\u98df\u3079\u305f\u304c\u3001\u3053\u308c\u304b\u3089\u3055\u3089\u306b\u30cb\u30f3\u30b8\u30f3\u3092\u98df\u3079\u3066\u4e00\u65e5\u306e\u98df\u4e8b\u3092\u5b8c\u4e86\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n// \u3042\u306a\u305f\u306f [\u98df\u4e8b\u306e\u5f8c\u306b\u98df\u3079\u305f\u30cb\u30f3\u30b8\u30f3\u306e\u7dcf\u6570, \u98df\u4e8b\u306e\u5f8c\u306b\u6b8b\u3063\u305f\u30cb\u30f3\u30b8\u30f3\u306e\u6570] \u306evector\u3092\u8fd4\u3059\u3079\u304d\u3067\u3059\u3002\n// \u3082\u3057\u6b8b\u308a\u306e\u30cb\u30f3\u30b8\u30f3\u306e\u6570\u304c\u8db3\u308a\u306a\u3051\u308c\u3070\u3001\u3042\u306a\u305f\u306f\u6b8b\u308a\u306e\u30cb\u30f3\u30b8\u30f3\u3092\u3059\u3079\u3066\u98df\u3079\u307e\u3059\u304c\u3001\u307e\u3060\u304a\u8179\u304c\u7a7a\u3044\u3066\u3044\u307e\u3059\u3002\n// \u4f8b:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_159_eat.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_159_eat", "test": "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n"}
{"name": "HumanEval_115_max_fill", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u9577\u65b9\u5f62\u306e\u683c\u5b50\u72b6\u306e\u4e95\u6238grid\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u5404\u884c\u306f1\u3064\u306e\u4e95\u6238\u3092\u8868\u3057\u3001\u884c\u306e\u54041\u306f1\u5358\u4f4d\u306e\u6c34\u3092\u8868\u3059\u3002\n// \u5404\u4e95\u6238\u306b\u306f\u3001\u305d\u3053\u304b\u3089\u6c34\u3092\u6c72\u307f\u4e0a\u3052\u308b\u306e\u306b\u4f7f\u3048\u308b\u5bfe\u5fdc\u3059\u308b\u30d0\u30b1\u30c4\u304c\u3042\u308a\uff0c\u3059\u3079\u3066\u306e\u30d0\u30b1\u30c4\u306f\u540c\u3058\u5bb9\u91cfcapacity\u3092\u6301\u3064\u3002\n// \u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3001\u30d0\u30b1\u30c4\u3092\u4f7f\u3063\u3066\u4e95\u6238\u3092\u7a7a\u306b\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n// \u30d0\u30b1\u30c4\u3092\u4f7f\u3046\u56de\u6570\u3092\u51fa\u529b\u305b\u3088\uff0e\n// \u4f8b 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// \u4f8b 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// \u4f8b 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// * \u3059\u3079\u3066\u306e\u4e95\u6238\u306e\u9577\u3055\u306f\u540c\u3058\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_115_max_fill.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_115_max_fill", "test": "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"}
{"name": "HumanEval_160_do_algebra", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306evector\u3067\u30aa\u30da\u30ec\u30fc\u30bf\u3068\u30aa\u30da\u30e9\u30f3\u30c9\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u6700\u521d\u306evector\u306f\u57fa\u672c\u7684\u306a\u4ee3\u6570\u6f14\u7b97\u3092\u6301\u3061\u30012\u756a\u76ee\u306evector\u306f\u6574\u6570\u306evector\u3067\u3042\u308b\u3002\n// \u4e0e\u3048\u3089\u308c\u305f2\u3064\u306evector\u3092\u7528\u3044\u3066\u4ee3\u6570\u5f0f\u3092\u69cb\u7bc9\u3057\u3001\u305d\u306e\u8a55\u4fa1\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u57fa\u672c\u7684\u306a\u4ee3\u6570\u6f14\u7b97\uff1a\n// \u52a0\u7b97 ( + )\n// \u6e1b\u7b97 ( - )\n// \u4e57\u7b97 ( * )\n// \u968e\u9664\u7b97 ( // )\n// \u6307\u6570 ( ** )\n// \u4f8b:\n// operator['+', '*', '-']\n// array list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// \u6ce8:\n// \u6f14\u7b97\u5b50vector\u306e\u9577\u3055\u306f\u3001\u30aa\u30da\u30e9\u30f3\u30c9vector\u306e\u9577\u3055\u304b\u30891\u3092\u5f15\u3044\u305f\u9577\u3055\u306b\u7b49\u3057\u3044\u3002\n// \u30aa\u30da\u30e9\u30f3\u30c9\u306f\u975e\u8ca0\u6574\u6570\u306evector\u3067\u3042\u308b\u3002\n// \u6f14\u7b97\u5b50vector\u306f\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u6f14\u7b97\u5b50\u3092\u6301\u3061\u3001\u30aa\u30da\u30e9\u30f3\u30c9vector\u306f\u5c11\u306a\u304f\u3068\u30822\u3064\u306e\u30aa\u30da\u30e9\u30f3\u30c9\u3092\u6301\u3064\u3002\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_160_do_algebra.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"//\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_160_do_algebra", "test": "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"//\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));\n}\n"}
{"name": "HumanEval_27_flip_case", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u3001\u5c0f\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\u3001\u5927\u6587\u5b57\u3092\u5c0f\u6587\u5b57\u306b\u53cd\u8ee2\u3059\u308b\u3002\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_27_flip_case.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_27_flip_case", "test": "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"}
{"name": "HumanEval_105_by_length", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u30011\u304b\u30899\u307e\u3067\u306e\u6574\u6570\u3092\u30bd\u30fc\u30c8\u3057\u3001\u5f97\u3089\u308c\u305fvector\u3092\u53cd\u8ee2\u3055\u305b\u3001\n// \u5404\u6841\u3092\u5bfe\u5fdc\u3059\u308b\u82f1\u540d \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" \u3067\u7f6e\u304d\u63db\u3048\u308b\u3002\n// \u4f8b\u3048\u3070:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_105_by_length.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"Eight\", (std::string)\"Four\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_105_by_length", "test": "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"Eight\", (std::string)\"Four\"})));\n}\n"}
{"name": "HumanEval_25_factorize", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306e\u7d20\u56e0\u6570\u3092\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u3078\u3068\u4e26\u3079\u305fvector\u3092\u8fd4\u3059\u3002\n// \u5404\u56e0\u6570\u306f\u3001\u56e0\u6570\u5206\u89e3\u3067\u73fe\u308c\u308b\u56de\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u56de\u6570\u306evector\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u5165\u529b\u6570\u306f\u3001\u3059\u3079\u3066\u306e\u56e0\u6570\u306e\u7a4d\u306b\u7b49\u3057\u304f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_25_factorize.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_25_factorize", "test": "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"}
{"name": "HumanEval_96_count_up_to", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u975e\u8ca0\u6574\u6570\u3092\u53d7\u3051\u53d6\u308a\u3001\u7d20\u6570\u3067n\u3088\u308a\u5c0f\u3055\u3044\u6700\u521d\u306en\u500b\u306e\u6574\u6570\u306evector\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\u3002\n// \u4f8b\u3048\u3070:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_96_count_up_to.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_96_count_up_to", "test": "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"}
{"name": "HumanEval_34_unique", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// vector\u306e\u30e6\u30cb\u30fc\u30af\u5024\u3092\u30bd\u30fc\u30c8\u3057\u3066\u8fd4\u3059\u3002\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_34_unique.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_34_unique", "test": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n"}
{"name": "HumanEval_74_total_match", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u306e2\u3064\u306evector\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306evector\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u5217\u306e\u6587\u5b57\u6570\u306e\u5408\u8a08\u304c\u3001\n// \u3082\u3046\u4e00\u65b9\u306evector\u3088\u308a\u5c11\u306a\u3044vector\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\u3002\n// \u3082\u30572\u3064\u306evector\u306e\u6587\u5b57\u6570\u304c\u540c\u3058\u306a\u3089\u3001\u6700\u521d\u306evector\u3092\u8fd4\u3059\u3002\n// \u4f8b\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_74_total_match.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_74_total_match", "test": "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n"}
{"name": "HumanEval_35_max_element", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// vector\u306e\u6700\u5927\u8981\u7d20\u3092\u8fd4\u3059\u3002\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_35_max_element.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_35_max_element", "test": "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n}\n"}
{"name": "HumanEval_132_is_nested", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u89d2\u62ec\u5f27\u306e\u307f\u3092\u542b\u3080\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3002\n// \u3053\u306e\u95a2\u6570\u306f\u3001\u6709\u52b9\u306a\u62ec\u5f27\u306e\u90e8\u5206\u5217\u304c\u5b58\u5728\u3057\u3001\u305d\u306e\u4e2d\u306b\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u62ec\u5f27\u304c\u5165\u308c\u5b50\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u771f\u3092\u8fd4\u3059\u3079\u304d\u3067\u3042\u308b\u3002\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_132_is_nested.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_132_is_nested", "test": "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n"}
{"name": "HumanEval_103_rounded_avg", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// 2\u3064\u306e\u6b63\u306e\u6574\u6570n\u3068m\u304c\u4e0e\u3048\u3089\u308c\u3001n\u304b\u3089m\u307e\u3067\u306e\u6574\u6570 (n\u3068m\u3092\u542b\u3080) \u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n// \u7b54\u3048\u3092\u6700\u3082\u8fd1\u3044\u6574\u6570\u306b\u4e38\u3081\u3066\u3001\u305d\u308c\u3092 2\u9032\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n// n\u304cm\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u306f\u3001-1\u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u4f8b:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_103_rounded_avg.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_103_rounded_avg", "test": "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"}
{"name": "HumanEval_113_odd_count", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5404\u6587\u5b57\u5217\u304c\u6570\u5b57\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001vector\u3092\u8fd4\u3059\u3002\n// \u51fa\u529b\u5404\u8981\u7d20\u306f\u3001\"the number of odd elements in the string i of the input.\"\u6587\u5b57\u5217\u306ei\u3092\u5165\u529b\u6587\u5b57\u5217\u306e\u5947\u6570\u6841\u306e\u30ab\u30a6\u30f3\u30c8\u6570\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u305f\u3082\u306e\u3068\u306a\u308b\u3002\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_113_odd_count.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = odd_count;\n    assert(candidate((std::vector<std::string>({(std::string)\"1234567\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"271\", (std::string)\"137\", (std::string)\"314\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (std::string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_113_odd_count", "test": "}\nint main() {\n    auto candidate = odd_count;\n    assert(candidate((std::vector<std::string>({(std::string)\"1234567\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"271\", (std::string)\"137\", (std::string)\"314\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (std::string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"})));\n}\n"}
{"name": "HumanEval_109_move_one_ball", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// N\u500b\u306e\u6574\u6570arr[1], arr[2], ..., arr[N]\u304b\u3089\u306a\u308bvector'arr'\u304c\u3042\u308b\u3002\n// vector\u306e\u4e2d\u306e\u6570\u5b57\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3079\u3089\u308c\u308b\u3002\n// \u3042\u306a\u305f\u306e\u8ab2\u984c\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u914d\u5217vector\u306b\u5bfe\u3057\u3066\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u3067\u3001\n// vector\u3092\u6e1b\u5c11\u3057\u306a\u3044\u9806\u5e8f\u306b\u4e26\u3079\u66ff\u3048\u308b\u3053\u3068\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n// \u53f3\u30b7\u30d5\u30c8\u64cd\u4f5c\u306f\u4f55\u56de\u884c\u3063\u3066\u3082\u3088\u3044\u3002\n// 1\u56de\u306e\u53f3\u30b7\u30d5\u30c8\u64cd\u4f5c\u306f\u3001\u914d\u5217vector\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u53f3\u65b9\u5411\u306b1\u3064\u305a\u3064\u30b7\u30d5\u30c8\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\n// vector\u306e\u6700\u5f8c\u306e\u8981\u7d20\u306f\u3001vector\u306e\u958b\u59cb\u4f4d\u7f6e\u3001\u3064\u307e\u308a0\u756a\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n// \u4e0a\u8a18\u306e\u64cd\u4f5c\u306b\u3088\u3063\u3066\u3001\u30bd\u30fc\u30c8\u3055\u308c\u305fvector\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070true\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3092\u8fd4\u3059\u3002\n// \u4e0e\u3048\u3089\u308c\u305fvector\u304c\u7a7a\u3067\u3042\u308c\u3070\u3001true \u3092\u8fd4\u3059\u3002\n// \u6ce8: \u4e0e\u3048\u3089\u308c\u305fvector\u306f\u4e00\u610f\u306a\u8981\u7d20\u3092\u6301\u3064\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3002\n// \u4f8b\u3048\u3070:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// \u8aac\u660e: \u53f3\u30b7\u30d5\u30c8\u6f14\u7b97\u30922\u56de\u884c\u3046\u3053\u3068\u3067\u3001\u4e0e\u3048\u3089\u308c\u305fvector\u306b\u5bfe\u3057\u3066\u975e\u6e1b\u5c11\u9806\u5e8f\u3092\u9054\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// \u8aac\u660e: \u4e0e\u3048\u3089\u308c\u305fvector\u306b\u5bfe\u3057\u3066\u53f3\u30b7\u30d5\u30c8\u6f14\u7b97\u3092\u4f55\u56de\u884c\u3063\u3066\u3082\u3001\u975e\u6e1b\u5c11\u9806\u5e8f\u3092\u5f97\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\nbool move_one_ball(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_109_move_one_ball.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_109_move_one_ball", "test": "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n}\n"}
{"name": "HumanEval_107_even_odd_palindrome", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570 n \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u56de\u6587\u3068\u5947\u6570\u56de\u6587\u306e\u6570\u304c\u7bc4\u56f2(1, n)\u306b\u53ce\u307e\u308b\u30da\u30a2\u3092\u8fd4\u3059\u3002\n// \u4f8b 1:\n// >>> evenOddPalindrome((3l))\n// (Pair.with(1l, 2l))\n// \u8aac\u660e:\n// \u6574\u6570\u306e\u56de\u6587\u306f1\u30012\u30013\u3067\u3042\u308a\u3001\u305d\u306e\u3046\u30611\u3064\u306f\u5076\u6570\u30012\u3064\u306f\u5947\u6570\u3067\u3042\u308b\u3002\n// \u4f8b 2:\n// >>> evenOddPalindrome((12l))\n// (Pair.with(4l, 6l))\n// \u8aac\u660e:\n// \u6574\u6570\u306e\u56de\u6587\u306f1\u30012\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u300111\u3067\u3042\u308a\u3001\u305d\u306e\u3046\u30614\u3064\u306f\u5076\u6570\u30016\u3064\u306f\u5947\u6570\u3067\u3042\u308b\u3002\n// \u6ce8:\n// 1. 1 <= n <= 10^3\n// 2. \u8fd4\u3055\u308c\u308b\u30da\u30a2\u306f\u3001\u305d\u308c\u305e\u308c\u5076\u6570\u56de\u6587\u3068\u5947\u6570\u56de\u6587\u306e\u6570\u3092\u6301\u3064\u3002\nstd::tuple<long, long> even_odd_palindrome(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_107_even_odd_palindrome.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = even_odd_palindrome;\n    assert(candidate((123)) == (std::make_tuple(8, 13)));\n    assert(candidate((12)) == (std::make_tuple(4, 6)));\n    assert(candidate((3)) == (std::make_tuple(1, 2)));\n    assert(candidate((63)) == (std::make_tuple(6, 8)));\n    assert(candidate((25)) == (std::make_tuple(5, 6)));\n    assert(candidate((19)) == (std::make_tuple(4, 6)));\n    assert(candidate((9)) == (std::make_tuple(4, 5)));\n    assert(candidate((1)) == (std::make_tuple(0, 1)));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_107_even_odd_palindrome", "test": "}\nint main() {\n    auto candidate = even_odd_palindrome;\n    assert(candidate((123)) == (std::make_tuple(8, 13)));\n    assert(candidate((12)) == (std::make_tuple(4, 6)));\n    assert(candidate((3)) == (std::make_tuple(1, 2)));\n    assert(candidate((63)) == (std::make_tuple(6, 8)));\n    assert(candidate((25)) == (std::make_tuple(5, 6)));\n    assert(candidate((19)) == (std::make_tuple(4, 6)));\n    assert(candidate((9)) == (std::make_tuple(4, 5)));\n    assert(candidate((1)) == (std::make_tuple(0, 1)));\n}\n"}
{"name": "HumanEval_138_is_equal_to_sum_even", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6570n\u304c\u3061\u3087\u3046\u30694\u3064\u306e\u6b63\u306e\u5076\u6570\u306e\u548c\u3068\u3057\u3066\u66f8\u3051\u308b\u304b\u3069\u3046\u304b\u3092\u8a55\u4fa1\u3059\u308b\u3002\n// \u4f8b\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_138_is_equal_to_sum_even.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_138_is_equal_to_sum_even", "test": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n"}
{"name": "HumanEval_62_derivative", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs\u306f\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u3092\u8868\u3059\u3002\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// \u3053\u306e\u591a\u9805\u5f0f\u306e\u5c0e\u95a2\u6570\u3092\u540c\u3058\u5f62\u5f0f\u3067\u8fd4\u3059\u3002\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_62_derivative.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_62_derivative", "test": "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));\n}\n"}
{"name": "HumanEval_126_is_sorted", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6570\u5024\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u306b\u3001\u305d\u308c\u3089\u304c\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\u3002\n// vector\u306b\u540c\u3058\u6570\u5024\u306e\u8907\u6570\u306e\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\u306ffalse\u3092\u8fd4\u3059\u3002\n// \u8ca0\u306e\u6570\u306f\u306a\u304f\u3001\u6574\u6570\u306e\u307f\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3059\u308b\u3002\n// \u4f8b\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_126_is_sorted.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_126_is_sorted", "test": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n"}
{"name": "HumanEval_161_solve", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217s\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// s[i]\u304c\u6587\u5b57\u306e\u5834\u5408\u3001\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u53cd\u8ee2\u3055\u305b\u308b\u3002\n// \u5165\u529b\u6587\u5b57\u5217\u306b\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3057\u307e\u3059\u3002\n// \u7d50\u679c\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u4f8b\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_161_solve.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_161_solve", "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"}
{"name": "HumanEval_130_tri", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306f\u3001\u3053\u3053\u6570\u4e16\u7d00\u306e\u9593\u306b\u6570\u5b66\u8005\u306b\u3088\u3063\u3066\u6df1\u304f\u7814\u7a76\u3055\u308c\u3001\u8ab0\u3082\u304c\u77e5\u3063\u3066\u3044\u308b\u3002\n// \u3057\u304b\u3057\u3001\u4eba\u3005\u304c\u77e5\u3089\u306a\u3044\u306e\u306f\u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3067\u3042\u308b\u3002\n// \u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306f\u518d\u5e30\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u308b\uff1a\n// tri(1) = 3\n// n\u304c\u5076\u6570\u306e\u5834\u5408: tri(n) = 1 + n / 2\n// n\u304c\u5947\u6570\u306e\u5834\u5408: tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1)\n// \u4f8b\u3048\u3070:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8\n// \u975e\u8ca0\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u6700\u521d\u306en + 1\u500b\u306e\u6570\u3092vector\u3067\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u4f8b:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_130_tri.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_130_tri", "test": "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"}
{"name": "HumanEval_36_fizz_buzz", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 11\u307e\u305f\u306f13\u3067\u5272\u308a\u5207\u308c\u308bn\u672a\u6e80\u306e\u6574\u6570\u306e\u4e2d\u306b7\u3068\u3044\u3046\u6570\u5b57\u304c\u73fe\u308c\u308b\u56de\u6570\u3092\u8fd4\u3059\u3002\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_36_fizz_buzz.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_36_fizz_buzz", "test": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n"}
{"name": "HumanEval_29_filter_by_prefix", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u306e\u5165\u529bvector\u304b\u3089\u3001\u6307\u5b9a\u3057\u305f\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3067\u59cb\u307e\u308b\u3082\u306e\u3060\u3051\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_29_filter_by_prefix.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_29_filter_by_prefix", "test": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"}
{"name": "HumanEval_84_solve", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570 N \u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3001\u305d\u306e\u6841\u306e\u7dcf\u548c\u30922\u9032\u6570\u3067\u8fd4\u3059\u3002\n// \u4f8b\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// \u5f15\u6570:\n// @N integer\n// \u5236\u7d04: 0 \u2264 N \u2264 10000.\n// \u51fa\u529b:\n// 2\u9032\u6570\u306e\u6587\u5b57\u5217\nstd::string solve(long N) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_84_solve.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_84_solve", "test": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"}
{"name": "HumanEval_129_minPath", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// N\u884cN\u5217\uff08N >= 2\uff09\u306e\u30b0\u30ea\u30c3\u30c9\u3068\u6b63\u306e\u6574\u6570k\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\n// \u30b0\u30ea\u30c3\u30c9\u306e\u5404\u30bb\u30eb\u306b\u306f\u5024\u304c\u542b\u307e\u308c\u308b\u30021, N * N] \u306e\u7bc4\u56f2\u306b\u3042\u308b\u3059\u3079\u3066\u306e\u6574\u6570\u306f\u3001\u30b0\u30ea\u30c3\u30c9\u306e\u30bb\u30eb\u306b\u3061\u3087\u3046\u30691\u56de\u73fe\u308c\u308b\u3002\n// \u3042\u306a\u305f\u306f\uff0c\u30b0\u30ea\u30c3\u30c9\u5185\u306e\u9577\u3055 k \u306e\u6700\u5c0f\u30d1\u30b9\u3092\u898b\u3064\u3051\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff0e\u3069\u306e\u30bb\u30eb\u304b\u3089\u59cb\u3081\u3066\u3082\u3088\u3044\u3057\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u96a3\u306e\u30bb\u30eb\u306b\u79fb\u52d5\u3057\u3066\u3082\u3088\u3044\u3002\n// \u9577\u3055 k \u306e\u30d1\u30b9\u3068\u306f\u3001\u3061\u3087\u3046\u3069 k \u500b\u306e\u30bb\u30eb\u3092\u8a2a\u554f\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\n// \u30b0\u30ea\u30c3\u30c9\u304b\u3089\u5916\u308c\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n// \u30d1\u30b9A\uff08\u9577\u3055k\uff09\u306f\u30d1\u30b9B\uff08\u9577\u3055k\uff09\u3088\u308a\u5c0f\u3055\u3044\u3068\u307f\u306a\u3055\u308c\u308b\u306e\u306f\u3001\n// \u30d1\u30b9A\u3068B\u304c\u901a\u308b\u30bb\u30eb\u4e0a\u306e\u5024\u306e\u9806\u5e8f\u4ed8\u304dvector\uff08\u3053\u308c\u3092lst_A\u3068lst_B\u3068\u547c\u3076\uff09\u3092\u4f5c\u3063\u305f\u5f8c\u3067\u3042\u308b\u3001\n// \u3064\u307e\u308a\u3001lst_A[i] < lst_B[i]\u3067\u3042\u308a\u3001\n// \u4efb\u610f\u306ej (1 <= j < i)\u306b\u5bfe\u3057\u3066lst_A[j] = lst_B[j]\u3068\u306a\u308b\u3088\u3046\u306a\u6574\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i (1 <= i <= k)\u304c\u5b58\u5728\u3059\u308b\u3002\n// \u7b54\u3048\u306f\u4e00\u610f\u3067\u3042\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3002\n// \u6700\u5c0f\u7d4c\u8def\u304c\u901a\u308b\u30bb\u30eb\u306e\u5024\u306e\u9806\u5e8f\u4ed8\u304dvector\u3092\u8fd4\u3059\u3002\n// \u4f8b: \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_129_minPath.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_129_minPath", "test": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n"}
{"name": "HumanEval_98_count_upper", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217 s \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u306e\u6dfb\u5b57\u306b\u542b\u307e\u308c\u308b\u5927\u6587\u5b57\u306e\u6bcd\u97f3\u306e\u6570\u3092\u6570\u3048\u306a\u3055\u3044\u3002\n// \u4f8b\u3048\u3070:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_98_count_upper.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"EEEE\")) == (2));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_98_count_upper", "test": "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"EEEE\")) == (2));\n}\n"}
{"name": "HumanEval_120_maximum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector arr \u3068\u6b63\u306e\u6574\u6570 k \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\n// arr \u306b\u542b\u307e\u308c\u308b\u6700\u5927 k \u500b\u306e\u6570\u5024\u3092\u542b\u3080\u3001\u9577\u3055 k \u306e\u30bd\u30fc\u30c8\u3055\u308c\u305fvector\u3092\u8fd4\u3059\u3002\n// \u4f8b 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// \u4f8b 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// \u96f6 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// \u6ce8:\n// 1. vector\u306e\u9577\u3055\u306f\u3001[1, 1000]\u306e\u7bc4\u56f2\u3068\u306a\u308b\u3002\n// 2. vector\u306e\u8981\u7d20\u306f [-1000, 1000] \u306e\u7bc4\u56f2\u306b\u306a\u308b\u3002\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_120_maximum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_120_maximum", "test": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n}\n"}
{"name": "HumanEval_24_largest_divisor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6570 n \u306b\u5bfe\u3057\u3066\u3001n \u3092\u5747\u7b49\u306b\u5272\u308a\u3001n \u3088\u308a\u5c0f\u3055\u3044\u6700\u5927\u306e\u6570\u3092\u6c42\u3081\u3088\u3002\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_24_largest_divisor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_24_largest_divisor", "test": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"}
{"name": "HumanEval_88_sort_array", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u975e\u8ca0\u6574\u6570\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u30bd\u30fc\u30c8\u5f8c\u306evector\u306e\u30b3\u30d4\u30fc\u3092\u8fd4\u3059\u3002\n// \u3053\u306e\u6642\u3001\u4e0e\u3048\u3089\u308c\u305fvector\u3092\u3001sum(\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024, \u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024) \u304c\u5947\u6570\u306a\u3089\u6607\u9806\u306b\u3001\n// sum(\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024, \u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024) \u304c\u5076\u6570\u306a\u3089\u964d\u9806\u306b\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002\n// \u6ce8:\n// * \u4e0e\u3048\u3089\u308c\u305fvector\u3092\u5909\u66f4\u3057\u306a\u3044\u3002\n// \u4f8b:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_88_sort_array.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_88_sort_array", "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));\n}\n"}
{"name": "HumanEval_106_f", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i\u306e\u8981\u7d20\u306e\u5024\u304ci\u304c\u5076\u6570\u306e\u5834\u5408\u306fi\u306e\u968e\u4e57\u3001\n// \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f1\u304b\u3089i\u307e\u3067\u306e\u6570\u306e\u548c\u3068\u306a\u308b\u3088\u3046\u306a\u30b5\u30a4\u30ban\u306evector\u3092\u8fd4\u3059\u95a2\u6570f\u3092\u5b9f\u88c5\u3059\u308b\u3002\n// i\u306f1\u304b\u3089\u59cb\u307e\u308b\u3002\n// i\u306e\u968e\u4e57\u306f1\u304b\u3089i\u307e\u3067\u306e\u6570\u306e\u639b\u3051\u7b97\uff081 * 2 * ... * i\uff09\u3067\u3042\u308b\u3002\n// \u4f8b:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_106_f.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_106_f", "test": "}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));\n}\n"}
{"name": "HumanEval_77_iscube", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570a\u3092\u53d7\u3051\u53d6\u308a\u3001\u3053\u306e\u6574\u6570\u304c\u3042\u308b\u6574\u6570\u306e3\u4e57\u3067\u3042\u308b\u5834\u5408\u306b\u771f\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// \u6ce8\uff1a\u6574\u6570a\u306f\u8ca0\u306e\u6570\u3084\u7121\u52b9\u306a\u5024\u306f\u542b\u307e\u308c\u306a\u3044\n// \u4f8b:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_77_iscube.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_77_iscube", "test": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n"}
{"name": "HumanEval_93_encode", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308a\u3001\u3059\u3079\u3066\u306e\u6587\u5b57\u306e\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u3001\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u6bcd\u97f3\u3092\u3001\n// \u82f1\u8a9e\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u305d\u306e\u6bcd\u97f3\u306e2\u3064\u524d\u306b\u73fe\u308c\u308b\u6587\u5b57\u306b\u7f6e\u304d\u63db\u3048\u308b\u3088\u3046\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// \u6587\u5b57\u3060\u3051\u3092\u60f3\u5b9a\u3059\u308b\u3002\n// \u4f8b:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_93_encode.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_93_encode", "test": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"}
{"name": "HumanEval_91_is_bored", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u5358\u8a9e\u306e\u7f85\u5217\u304b\u3089\u9000\u5c48\u306e\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n// \u9000\u5c48\u306f\u3001'I'\u3068\u3044\u3046\u5358\u8a9e\u3067\u59cb\u307e\u308b\u6587\u306e\u3053\u3068\u3067\u3042\u308b\u3002\n// \u6587\u306f'.'\u3001'?'\u307e\u305f\u306f'!'\u3067\u533a\u5207\u3089\u308c\u308b\u3002\n// \u4f8b\u3048\u3070:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_91_is_bored.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_91_is_bored", "test": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n"}
{"name": "HumanEval_43_pairs_sum_to_zero", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero \u306f\u6574\u6570\u306evector\u3092\u5165\u529b\u3068\u3059\u308b\u3002\n// vector\u4e2d\u306b\u3001\u548c\u304c\u30bc\u30ed\u306b\u306a\u308b\u8981\u7d20\u30da\u30a2\u304c\u5b58\u5728\u3059\u308c\u3070\u771f\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3057\u307e\u3059\u3002\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_43_pairs_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_43_pairs_sum_to_zero", "test": "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"}
{"name": "HumanEval_71_triangle_area", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e09\u89d2\u5f62\u306e3\u8fba\u306e\u9577\u3055\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// 3\u8fba\u304c\u6709\u52b9\u306a\u4e09\u89d2\u5f62\u3092\u5f62\u6210\u3059\u308b\u5834\u5408\u3001\u4e09\u89d2\u5f62\u306e\u9762\u7a4d\u3092\u5c0f\u6570\u70b9\u4ee5\u4e0b2\u6841\u306b\u4e38\u3081\u305f\u5024\u3092\u8fd4\u3059\u3002\n// \u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f -1 \u3092\u8fd4\u3059\u3002\n// \u4efb\u610f\u306e2\u8fba\u306e\u548c\u304c3\u8fba\u3088\u308a\u5927\u304d\u3044\u3068\u304d\u30013\u8fba\u306f\u6709\u52b9\u306a\u4e09\u89d2\u5f62\u3068\u306a\u308b\u3002\n// \u4f8b:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_71_triangle_area.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0f));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18f));\n    assert(candidate((2), (2), (2)) == (1.73f));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25f));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43f));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_71_triangle_area", "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0f));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18f));\n    assert(candidate((2), (2), (2)) == (1.73f));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25f));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43f));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n"}
{"name": "HumanEval_148_bf", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u592a\u967d\u7cfb\u306b\u306f8\u3064\u306e\u60d1\u661f\u304c\u3042\u308b\uff1a\n// \u592a\u967d\u306b\u4e00\u756a\u8fd1\u3044\u306e\u306f\u6c34\u661f\u3067\u3001\u305d\u306e\u6b21\u304c\u91d1\u661f\u3001\u305d\u306e\u6b21\u304c\u5730\u7403\u3001\u706b\u661f\u3001\u6728\u661f\u3001\u571f\u661f\u3001\u5929\u738b\u661f\u3001\u6d77\u738b\u661f\u3002\n// 2\u3064\u306e\u60d1\u661f\u540d\u3092\u6587\u5b57\u5217planet1\u3068planet2\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// \u3053\u306e\u95a2\u6570\u306f\u3001planet1\u306e\u8ecc\u9053\u3068planet2\u306e\u8ecc\u9053\u306e\u9593\u306b\u4f4d\u7f6e\u3059\u308b\u8ecc\u9053\u3092\u6301\u3064\u3059\u3079\u3066\u306e\u60d1\u661f\u3092\u3001\n// \u592a\u967d\u306b\u8fd1\u3044\u9806\u306b\u4e26\u3079\u305f\u7d44\u3092\u8fd4\u3059\u3002\n// planet1\u307e\u305f\u306fplanet2\u304c\u6b63\u3057\u3044\u60d1\u661f\u540d\u3067\u306a\u3044\u5834\u5408\u3001\u3053\u306e\u95a2\u6570\u306f\u7a7a\u306e\u30da\u30a2\u3092\u8fd4\u3059\u3002\n// \u4f8b\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_148_bf.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_148_bf", "test": "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n"}
{"name": "HumanEval_131_digits", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570 n \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5947\u6570\u6841\u306e\u7a4d\u3092\u8fd4\u3059\u3002\n// \u3059\u3079\u3066\u306e\u6841\u304c\u5076\u6570\u306e\u5834\u5408\u306f0\u3092\u8fd4\u3059\u3002\n// \u4f8b\u3048\u3070:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_131_digits.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) == (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_131_digits", "test": "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) == (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n}\n"}
{"name": "HumanEval_101_words_string", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u306f2\u3064\u306e\u6b63\u306e\u6570x\u3068y\u3092\u53d6\u308a\u3001[x, y]\u306e\u7bc4\u56f2\u306b\u542b\u307e\u308c\u308b\u6700\u5927\u306e\u5076\u6570\u6574\u6570\u3092\u8fd4\u3059\u3002\n// \u305d\u306e\u3088\u3046\u306a\u6570\u304c\u306a\u3044\u5834\u5408\u3001\u95a2\u6570\u306f-1\u3092\u8fd4\u3059\u3002\n// \u4f8b\u3048\u3070:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_101_words_string.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"gamal\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_101_words_string", "test": "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"gamal\"})));\n}\n"}
{"name": "HumanEval_18_how_many_times", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u90e8\u5206\u6587\u5b57\u5217\u304c\u5143\u306e\u6587\u5b57\u5217\u306e\u4e2d\u3067\u4f55\u56de\u898b\u3064\u304b\u308b\u304b\u3092\u8abf\u3079\u308b\u3002\u91cd\u8907\u3059\u308b\u30b1\u30fc\u30b9\u3092\u6570\u3048\u308b\u3002\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_18_how_many_times.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_18_how_many_times", "test": "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"}
{"name": "HumanEval_137_compare_one", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// \u5b9f\u6570\u3092\u8868\u3059\u6574\u6570\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3001\u307e\u305f\u306f\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u6307\u5b9a\u3055\u308c\u305f\u5909\u6570\u578b\u3067\u5927\u304d\u3044\u65b9\u306e\u5909\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n// \u5024\u304c\u7b49\u3057\u3044\u5834\u5408\u306f std:nullopt \u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u6ce8: \u5b9f\u6570\u304c\u6587\u5b57\u5217\u3068\u3057\u3066\u8868\u3055\u308c\u308b\u5834\u5408\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u306f . \u307e\u305f\u306f ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_137_compare_one.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = compare_one;\n    assert(candidate(1, 2) == 2);\n    assert(candidate(1, 2.5f) == 2.5f);\n    assert(candidate(2, 3) == 3);\n    assert(candidate(5, 6) == 6);\n    assert(candidate(1, \"2,3\") == \"2,3\");\n    assert(candidate(\"5,1\", \"6\") == \"6\");\n    assert(candidate(\"1\", \"2\") == \"2\");\n    assert(candidate(\"1\", 1) == std::nullopt);\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_137_compare_one", "test": "}\nint main() {\n    auto candidate = compare_one;\n    assert(candidate(1, 2) == 2);\n    assert(candidate(1, 2.5f) == 2.5f);\n    assert(candidate(2, 3) == 3);\n    assert(candidate(5, 6) == 6);\n    assert(candidate(1, \"2,3\") == \"2,3\");\n    assert(candidate(\"5,1\", \"6\") == \"6\");\n    assert(candidate(\"1\", \"2\") == \"2\");\n    assert(candidate(\"1\", 1) == std::nullopt);\n}\n"}
{"name": "HumanEval_51_remove_vowels", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels\u306f\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u6bcd\u97f3\u3092\u9664\u3044\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_51_remove_vowels.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_51_remove_vowels", "test": "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"}
{"name": "HumanEval_70_strange_sort_list", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001vector\u3092\u5947\u5999\u306a\u9806\u5e8f\u3067\u8fd4\u3059\u3002\n// \u5947\u5999\u306a\u9806\u5e8f\u306f\u3001\u6700\u5c0f\u5024\u304b\u3089\u59cb\u307e\u308a\u3001\u6b8b\u308a\u306e\u6574\u6570\u306e\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u306e\u9806\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3002\n// \u4f8b:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_70_strange_sort_list.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_70_strange_sort_list", "test": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n"}
{"name": "HumanEval_20_find_closest_elements", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6570\u5024\u306evector\uff08\u5c11\u306a\u304f\u3068\u30822\u3064\u306e\u9577\u3055\uff09\u304b\u3089\u3001\u4e92\u3044\u306b\u6700\u3082\u8fd1\u3044\u3082\u306e\u30922\u3064\u9078\u629e\u3057\u3001\n// \u9806\u756a\u306b\u8fd4\u3057\u307e\u3059\uff08\u5c0f\u3055\u3044\u6570\u3001\u5927\u304d\u3044\u6570\uff09\u3002\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_20_find_closest_elements.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_20_find_closest_elements", "test": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));\n}\n"}
{"name": "HumanEval_76_is_simple_power", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3001\u3042\u308b\u6570x\u304cn\u306e\u5358\u7d14\u7d2f\u4e57\u3067\u3042\u308b\u5834\u5408\u306b\u771f\u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306b\u507d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u3067\u3042\u308b\u3002\n// n**int=x\u306e\u5834\u5408\u3001x\u306fn\u306e\u5358\u7d14\u7d2f\u4e57\u3067\u3042\u308b\u3002\n// \u4f8b\u3048\u3070:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_76_is_simple_power.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_76_is_simple_power", "test": "}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"}
{"name": "HumanEval_39_prime_fib", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib\u306f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3067\u3042\u308a\u3001\u304b\u3064\u7d20\u6570\u3067\u3042\u308bn\u756a\u76ee\u306e\u6570\u3092\u8fd4\u3059\u3002\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_39_prime_fib.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_39_prime_fib", "test": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n"}
{"name": "HumanEval_145_order_by_points", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306e\u914d\u5217\u30ea\u30b9\u30c8\u3092\u3001\u305d\u306e\u6841\u6570\u306e\u548c\u306b\u5f93\u3063\u3066\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// \u6ce8: \u6841\u6570\u306e\u548c\u304c\u540c\u3058\u3088\u3046\u306a\u9805\u76ee\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u3001\u5143\u306e\u914d\u5217\u30ea\u30b9\u30c8\u5185\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u57fa\u3065\u3044\u3066\u4e26\u3079\u66ff\u3048\u3092\u884c\u3046\u3053\u3068\u3002\n// \u4f8b\u3048\u3070:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_145_order_by_points.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_145_order_by_points", "test": "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"}
{"name": "HumanEval_0_has_close_elements", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6307\u5b9a\u3055\u308c\u305f\u6570\u5024\u306evector\u5185\u3067\u3001\u6307\u5b9a\u3055\u308c\u305f\u3057\u304d\u3044\u5024\u3088\u308a\u3082\u4e92\u3044\u306b\u8fd1\u30442\u3064\u306e\u6570\u5024\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n// \u30b9\u30ec\u30c3\u30c9\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_0_has_close_elements.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_0_has_close_elements", "test": "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n}\n"}
{"name": "HumanEval_10_make_palindrome", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u3067\u59cb\u307e\u308b\u6700\u77ed\u306e\u56de\u6587\u3092\u898b\u3064\u3051\u308b\u3002\n// \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8003\u3048\u65b9\u306f\u5358\u7d14\u3067\u3042\u308b\uff1a\n// - \u6e21\u3055\u308c\u305f\u6587\u5b57\u5217\u306e\u63a5\u982d\u8f9e\u306e\u3046\u3061\u3001\u56de\u6587\u3067\u3042\u308b\u6700\u9577\u306e\u3082\u306e\u3092\u898b\u3064\u3051\u308b\u3002\n// - \u56de\u6587\u306e\u63a5\u5c3e\u8f9e\u306e\u524d\u306b\u6765\u308b\u63a5\u982d\u8f9e\u306e\u9006\u6570\u3092\u6587\u5b57\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308b\u3002\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_10_make_palindrome.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"jerry\")) == (\"jerryrrej\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_10_make_palindrome", "test": "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"jerry\")) == (\"jerryrrej\"));\n}\n"}
{"name": "HumanEval_11_string_xor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5165\u529b\u306f1\u30680\u306e\u307f\u304b\u3089\u306a\u308b2\u3064\u306e\u6587\u5b57\u5217a\u3068b\u3067\u3042\u308b\u3002\n// \u3053\u308c\u3089\u306e\u5165\u529b\u306b\u5bfe\u3057\u3066\u30d0\u30a4\u30ca\u30eaXOR\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3059\u3002\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_11_string_xor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_11_string_xor", "test": "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"}
{"name": "HumanEval_139_special_factorial", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30d6\u30e9\u30b8\u30eb\u306e\u968e\u4e57\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u308b\uff1a\n// specialFactorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// \u4f8b\u3048\u3070:\n// >>> special_factorial((4))\n// (288)\n// \u3053\u306e\u95a2\u6570\u306f\u6574\u6570\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u3053\u306e\u6574\u6570\u306e\u968e\u4e57\u3092\u8fd4\u3059\u3002\nlong special_factorial(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_139_special_factorial.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_139_special_factorial", "test": "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"}
{"name": "HumanEval_122_add_elements", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570arr\u3068\u6574\u6570k\u304b\u3089\u306a\u308b\u7a7a\u3067\u306a\u3044\u914d\u5217\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u308b\u3001\n// arr\u306e\u6700\u521d\u306ek\u500b\u306e\u8981\u7d20\u304b\u3089\u6700\u59272\u6841\u306e\u8981\u7d20\u306e\u548c\u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_122_add_elements.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_122_add_elements", "test": "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n}\n"}
{"name": "HumanEval_46_fib4", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Fib4\u6570\u5217\u306f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306b\u4f3c\u305f\u6570\u5217\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\uff1a\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// fib4\u6570\u5217\u306en\u756a\u76ee\u306e\u8981\u7d20\u3092\u52b9\u7387\u7684\u306b\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002 \u518d\u5e30\u306f\u4f7f\u308f\u306a\u3044\u3053\u3068\u3002\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_46_fib4.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_46_fib4", "test": "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n"}
{"name": "HumanEval_104_unique_digits", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570x\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u6841\u3092\u6301\u305f\u306a\u3044\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3057\u305fvector\u3092\u8fd4\u3059\u3002\n// \u6ce8: \u8fd4\u3055\u308c\u308bvector\u306f\u3001\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// \u4f8b\u3048\u3070:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_104_unique_digits.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_104_unique_digits", "test": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n"}
{"name": "HumanEval_117_select_words", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217s\u3068\u81ea\u7136\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u6587\u5b57\u5217s\u306e\u4e2d\u304b\u3089\u3001n\u500b\u306e\u5b50\u97f3\u3092\u542b\u3080\u3059\u3079\u3066\u306e\u5358\u8a9e\u3092\u3001\n// \u5358\u8a9e\u304c\u6587\u5b57\u5217s\u306b\u73fe\u308c\u308b\u9806\u306bvector\u306b\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u8ab2\u305b\u3089\u308c\u305f\u3002\n// \u6587\u5b57\u5217s\u304c\u7a7a\u306e\u5834\u5408\u3001\u95a2\u6570\u306f\u7a7a\u306evector\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n// \u6ce8\uff1a\u5165\u529b\u6587\u5b57\u5217\u306b\u306f\u6587\u5b57\u3068\u30b9\u30da\u30fc\u30b9\u3057\u304b\u542b\u307e\u308c\u306a\u3044\u3068\u4eee\u5b9a\u3057\u3066\u3088\u3044\u3002\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_117_select_words.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_117_select_words", "test": "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"}
{"name": "HumanEval_72_will_it_fly", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u7269\u4f53 q \u304c\u98db\u3076\u5834\u5408\u306f\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u507d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u3051\u3002\n// \u30aa\u30d6\u30b8\u30a7\u30af\u30c8q\u306f\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u3066\u3044\u3066\uff08\u56de\u6587vector\uff09\u3001\u305d\u306e\u8981\u7d20\u306e\u548c\u304c\u6700\u5927\u91cd\u91cfw\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u98db\u3076\u3002\n// \u4f8b:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2\u306f\u53ef\u80fd\u306a\u6700\u5927\u91cd\u91cf\u3088\u308a\u5c11\u306a\u3044\u304c\u3001\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u3002\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # \u30d0\u30e9\u30f3\u30b9\u306f\u53d6\u308c\u3066\u3044\u308b\u304c\u30013+2+3\u306f\u53ef\u80fd\u306a\u6700\u5927\u91cd\u91cf\u3092\u8d85\u3048\u3066\u3044\u308b\u3002\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3\u306f\u53ef\u80fd\u306a\u6700\u5927\u91cd\u91cf\u3088\u308a\u5c0f\u3055\u304f\u3001\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u3066\u3044\u308b\u3002\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3\u306f\u6700\u5927\u91cd\u91cf\u3088\u308a\u5c0f\u3055\u304f\u3001\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u3066\u3044\u308b\u3002\nbool will_it_fly(std::vector<long> q, long w) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_72_will_it_fly.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_72_will_it_fly", "test": "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));\n}\n"}
{"name": "HumanEval_55_fib", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n\u756a\u76ee\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u8fd4\u3059\u3002\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_55_fib.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_55_fib", "test": "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"}
{"name": "HumanEval_153_Strongest_Extension", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30af\u30e9\u30b9\u306e\u540d\u524d\uff08\u6587\u5b57\u5217\uff09\u3068\u3001\u62e1\u5f35\u5b50\u306evector\u304c\u6e21\u3055\u308c\u307e\u3059\u3002\n// \u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u8ffd\u52a0\u30af\u30e9\u30b9\u3092\u30af\u30e9\u30b9\u306b\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002\n// \u62e1\u5f35\u5b50\u306e\u5f37\u3055\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n// \u62e1\u5f35\u6a5f\u80fd\u306e\u540d\u524d\u306b\u542b\u307e\u308c\u308b\u5927\u6587\u5b57\u306e\u6570\u3092 CAP\u3001\u5c0f\u6587\u5b57\u306e\u6570\u3092 SM \u3068\u3059\u308b\u3068\u3001\u5f37\u3055\u306f CAP - SM \u3068\u3044\u3046\u5206\u6570\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n// \u6700\u3082\u5f37\u3044\u62e1\u5f35\u5b50\u3092\u898b\u3064\u3051\u3001\u6b21\u306e\u5f62\u5f0f\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a ClassName.StrongestExtensionName\u3002\n// \u540c\u3058\u5f37\u5ea6\u306e\u62e1\u5f35\u5b50\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u3001vector\u306e\u6700\u521d\u306b\u6765\u308b\u3082\u306e\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n// \u305f\u3068\u3048\u3070\u3001\u30af\u30e9\u30b9\u3068\u3057\u3066 \u300cSlices\u300d \u3092\u6307\u5b9a\u3057\u3001\u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u306evector\u3092\u6307\u5b9a\u3057\u305f\u3068\u3057\u307e\u3059\uff1a\n// [SErviNGSliCes', 'Cheese', 'StuFfed'] \u3068\u3059\u308b\u3068\u3001'SErviNGSliCes' \u304c\u3082\u3063\u3068\u3082\u5f37\u3044\u62e1\u5f35\u5b50\u306a\u306e\u3067\u3001\n// 'Slices.SErviNGSliCes' \u3092\u8fd4\u3057\u307e\u3059\u3002 (\u5f37\u5ea6\u306f-1)\u3002\n// \u4f8b:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_153_Strongest_Extension.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_153_Strongest_Extension", "test": "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"}
{"name": "HumanEval_119_match_parens", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u6587\u5b57\u5217\u306evector\u304c\u4e0e\u3048\u3089\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u306e\u6587\u5b57\u5217\u3082\u958b\u62ec\u5f27'('\u307e\u305f\u306f\u9589\u62ec\u5f27')'\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3002\n// \u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u30012\u3064\u306e\u6587\u5b57\u5217\u3092\u3042\u308b\u9806\u5e8f\u3067\u9023\u7d50\u3057\u3001\u7d50\u679c\u3068\u3057\u3066\u5f97\u3089\u308c\u308b\u6587\u5b57\u5217\u304c\u826f\u3044\u3082\u306e\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n// \u9023\u7d50\u3057\u3066\u5f97\u3089\u308c\u305f\u6587\u5b57\u5217S\u306f\u3001S\u5185\u306e\u3059\u3079\u3066\u306e\u62ec\u5f27\u304c\u5747\u8861\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u9650\u308a\u3001\u826f\u3044\u6587\u5b57\u5217\u3068\u307f\u306a\u3055\u308c\u308b\u3002\u4f8b\u3048\u3070\u3001\u6587\u5b57\u5217 '(())()' \u306f\u826f\u3044\u304c\u3001\u6587\u5b57\u5217 '())' \u306f\u826f\u304f\u306a\u3044\u3002\n// \u826f\u3044\u6587\u5b57\u5217\u3067\u3042\u308c\u3070'Yes'\u3092\u8fd4\u3057\u3001\u306a\u3051\u308c\u3070'No'\u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_119_match_parens.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_119_match_parens", "test": "}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"}
{"name": "HumanEval_90_next_smallest", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// vector\u306e2\u756a\u76ee\u306b\u5c0f\u3055\u3044\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570 next_smallest() \u3092\u66f8\u304f\u3002\n// \u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u7a7a\u3092\u8fd4\u3059\u3002\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_90_next_smallest.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_90_next_smallest", "test": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n"}
{"name": "HumanEval_92_any_int", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 3\u3064\u306e\u6570\u5024\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u4f5c\u308b\u3002\n// \u3044\u305a\u308c\u304b\u306e\u6570\u5024\u304c\u4ed6\u306e2\u3064\u306e\u6570\u5024\u306e\u548c\u306b\u7b49\u3057\u304f\u3001\u3059\u3079\u3066\u306e\u6570\u5024\u304c\u6574\u6570\u3067\u3042\u308b\u5834\u5408\u306b\u771f\u3092\u8fd4\u3059\u3002\n// \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u507d\u3092\u8fd4\u3059\u3002\n// \u4f8b\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_92_any_int.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5f), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0f), (float(4)), (float(7))) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_92_any_int", "test": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5f), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0f), (float(4)), (float(7))) == (false));\n}\n"}
{"name": "HumanEval_2_truncate_number", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5206\u89e3\u3067\u304d\u308b\u3002\n// \u6574\u6570\u90e8\uff08\u4e0e\u3048\u3089\u308c\u305f\u6570\u3088\u308a\u5c0f\u3055\u3044\u6700\u5927\u306e\u6574\u6570\uff09\u3068\u5c0f\u6570\u90e8(\u5e38\u306b1\u3088\u308a\u5c0f\u3055\u3044\u6b8b\u90e8) \u306b\u5206\u89e3\u3055\u308c\u307e\u3059\u3002\n// \u6570\u5024\u306e\u5c0f\u6570\u90e8\u3092\u8fd4\u3057\u307e\u3059\u3002\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_2_truncate_number.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5f)) == (0.5f));\n    assert(candidate((1.25f)) == (0.25f));\n    assert(candidate((123.0f)) == (0.0f));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_2_truncate_number", "test": "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5f)) == (0.5f));\n    assert(candidate((1.25f)) == (0.25f));\n    assert(candidate((123.0f)) == (0.0f));\n}\n"}
{"name": "HumanEval_42_incr_list", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u8981\u7d20\u30921\u305a\u3064\u5897\u52a0\u3055\u305b\u305fvector\u3092\u8fd4\u3059\u3002\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_42_incr_list.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_42_incr_list", "test": "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n"}
{"name": "HumanEval_150_x_or_y", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n\u304c\u7d20\u6570\u306e\u5834\u5408\u306fx\u306e\u5024\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306fy\u306e\u5024\u3092\u8fd4\u3059\u5358\u7d14\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\n// \u4f8b:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_150_x_or_y.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = x_or_y;\n    assert(candidate((7), (34), (12)) == (34));\n    assert(candidate((15), (8), (5)) == (5));\n    assert(candidate((3), (33), (5212)) == (33));\n    assert(candidate((1259), (3), (52)) == (3));\n    assert(candidate((7919), (-1), (12)) == (-1));\n    assert(candidate((3609), (1245), (583)) == (583));\n    assert(candidate((91), (56), (129)) == (129));\n    assert(candidate((6), (34), (1234)) == (1234));\n    assert(candidate((1), (2), (0)) == (0));\n    assert(candidate((2), (2), (0)) == (2));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_150_x_or_y", "test": "}\nint main() {\n    auto candidate = x_or_y;\n    assert(candidate((7), (34), (12)) == (34));\n    assert(candidate((15), (8), (5)) == (5));\n    assert(candidate((3), (33), (5212)) == (33));\n    assert(candidate((1259), (3), (52)) == (3));\n    assert(candidate((7919), (-1), (12)) == (-1));\n    assert(candidate((3609), (1245), (583)) == (583));\n    assert(candidate((91), (56), (129)) == (129));\n    assert(candidate((6), (34), (1234)) == (1234));\n    assert(candidate((1), (2), (0)) == (0));\n    assert(candidate((2), (2), (0)) == (2));\n}\n"}
{"name": "HumanEval_49_modp", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2^n modulo p \u3092\u8fd4\u3059\uff08\u6570\u5024\u306b\u6ce8\u610f\uff09\u3002\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_49_modp.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_49_modp", "test": "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n"}
{"name": "HumanEval_155_even_odd_count", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\u5076\u6570\u6841\u3068\u5947\u6570\u6841\u306e\u6570\u3092\u6301\u3064\u30da\u30a2\u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_155_even_odd_count.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_155_even_odd_count", "test": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"}
{"name": "HumanEval_80_is_happy", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217s\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u305d\u306e\u6587\u5b57\u5217\u304c\u5e78\u305b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n// \u6587\u5b57\u5217\u306e\u9577\u3055\u304c\u5c11\u306a\u304f\u3068\u30823\u3067\u3042\u308a\u3001\u9023\u7d9a\u3059\u308b3\u6587\u5b57\u304c\u3059\u3079\u3066\u7570\u306a\u308b\u5834\u5408\u3001\u6587\u5b57\u5217\u306f\u5e78\u305b\u3067\u3042\u308b\u3002\n// \u4f8b\u3048\u3070:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_80_is_happy.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_80_is_happy", "test": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n"}
{"name": "HumanEval_59_largest_prime_factor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// n \u306e\u6700\u5927\u306e\u7d20\u56e0\u6570\u3092\u8fd4\u3059\u3002n > 1 \u3067\u7d20\u6570\u3067\u306a\u3044\u3068\u4eee\u5b9a\u3059\u308b\u3002\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_59_largest_prime_factor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_59_largest_prime_factor", "test": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n"}
{"name": "HumanEval_66_digitSum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30bf\u30b9\u30af\n// \u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u4e0a\u4f4d\u6587\u5b57\u306e\u307f\u306e\u5408\u8a08\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\u3002\n// ASCII\u30b3\u30fc\u30c9\u3002\n// \u4f8b:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_66_digitSum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_66_digitSum", "test": "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"}
{"name": "HumanEval_21_rescale_to_unit", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5c11\u306a\u304f\u3068\u30822\u3064\u306e\u8981\u7d20\u3092\u6301\u3064\uff09\u6570\u5024\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\n// \u305d\u306evector\u306b\u3001\u6700\u5c0f\u306e\u6570\u5024\u304c0\u306b\u306a\u308a\u3001\u6700\u5927\u306e\u6570\u5024\u304c1\u306b\u306a\u308b\u3088\u3046\u306a\u7dda\u5f62\u5909\u63db\u3092\u9069\u7528\u3059\u308b\u3002\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_21_rescale_to_unit.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_21_rescale_to_unit", "test": "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n}\n"}
{"name": "HumanEval_121_solution", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306e\u7a7a\u3067\u306a\u3044\u914d\u5217\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u5947\u6570\u8981\u7d20\u306e\u7dcf\u548c\u3092\u8fd4\u3059\u3002\n// \u4f8b\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_121_solution.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_121_solution", "test": "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));\n}\n"}
{"name": "HumanEval_68_pluck", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u975e\u8ca0\u6574\u6570\u306e\u30ce\u30fc\u30c9\u3092\u6301\u3064\u6728\u306e\u679d\u3092\u8868\u3059vector\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u30ce\u30fc\u30c9\u306e1\u3064\u3092\u629c\u304d\u51fa\u3057\u3066\u8fd4\u3059\u306e\u304c\u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u3067\u3059\u3002.\n// \u6458\u51fa\u3055\u308c\u308b\u30ce\u30fc\u30c9\u306f\u3001\u6700\u5c0f\u306e\u5076\u6570\u5024\u3092\u6301\u3064\u30ce\u30fc\u30c9\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n// \u540c\u3058\u6700\u5c0f\u306e\u5076\u6570\u5024\u3092\u6301\u3064\u30ce\u30fc\u30c9\u304c\u8907\u6570\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u6700\u5c0f\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6301\u3064\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u62bd\u51fa\u3055\u308c\u305f\u30ce\u30fc\u30c9\u306f\u3001vector [ smallest_value, its index ] \u3067\u8fd4\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3001\n// \u3082\u3057\u5076\u6570\u5024\u304c\u306a\u304b\u3063\u305f\u308a\u3001\u4e0e\u3048\u3089\u308c\u305f\u914d\u5217\u306evector\u304c\u7a7a\u306e\u5834\u5408\u306f [] \u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u4f8b 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \u4f8b 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \u4f8b 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// \u4f8b 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// \u8aac\u660e: 0\u306f\u6700\u5c0f\u306e\u5024\u3060\u304c\u3001\u30bc\u30ed\u306f2\u3064\u3042\u308b\u3002\n// \u3088\u3063\u3066\u3001\u6700\u5c0f\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6301\u3064\u6700\u521d\u306e\u30bc\u30ed\u3092\u9078\u3076\u3053\u3068\u306b\u3059\u308b\u3002\n// \u5236\u7d04:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_68_pluck.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_68_pluck", "test": "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));\n}\n"}
{"name": "HumanEval_147_get_max_triples", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u9577\u3055 n \u306e\u6574\u6570vector a \u3092\u4f5c\u6210\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// vector\u306e\u5404\u7d22\u5f15 i (1 \u2264 i \u2264 n) \u306b\u5bfe\u3057\u3066\u3001a[i] = i * i - i + 1 \u306e\u5024\u3092\u8fd4\u3059\u3002\n// i < j < k\u3067\u3001a[i] + a[j] + a[k]\u304c3\u306e\u500d\u6570\u3067\u3042\u308ba\u306e\u30c8\u30ea\u30d7\u30eb(a[i], a[j], a[k])\u306e\u6570\u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_147_get_max_triples.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100)) == (53361));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_147_get_max_triples", "test": "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100)) == (53361));\n}\n"}
{"name": "HumanEval_110_exchange", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u554f\u984c\u3067\u306f\u30012\u3064\u306e\u6570\u5024\u306evector\u3067\u3042\u308blst1\u3001lst2\u3092\u53d7\u3051\u53d6\u308a\u3001\n// \u305d\u308c\u3089\u306e\u9593\u3067\u8981\u7d20\u306e\u4ea4\u63db\u3092\u5b9f\u884c\u3057\u3066lst1\u3092\u5076\u6570\u306e\u307f\u306evector\u306b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\u3002\n// lst1\u3068lst2\u306e\u9593\u3067\u4ea4\u63db\u3055\u308c\u308b\u8981\u7d20\u306e\u6570\u306b\u5236\u9650\u306f\u306a\u3044\u3002\n// lst1\u3068lst2\u306e\u9593\u3067\u8981\u7d20\u306e\u4ea4\u63db\u3092\u884c\u3044\u3001lst1\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u5076\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\"YES\"\u3092\u8fd4\u3059\u3002\n// \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u201dNO\"\u3092\u8fd4\u3059\u3002\n// \u4f8b\u3048\u3070:\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// \u5165\u529bvector\u306f\u7a7a\u3067\u306a\u3044\u3053\u3068\u304c\u524d\u63d0\u3067\u3042\u308b\u3002\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_110_exchange.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = exchange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (\"YES\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_110_exchange", "test": "}\nint main() {\n    auto candidate = exchange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (\"YES\"));\n}\n"}
{"name": "HumanEval_47_median", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// vector l \u306e\u8981\u7d20\u306e\u4e2d\u592e\u5024\u3092\u8fd4\u3059\u3002\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_47_median.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));\n    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_47_median", "test": "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));\n    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"}
{"name": "HumanEval_82_prime_length", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u6587\u5b57\u5217\u306e\u9577\u3055\u304c\u7d20\u6570\u3067\u3042\u308c\u3070\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\u3002\n// \u4f8b\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_82_prime_length.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_82_prime_length", "test": "}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"}
{"name": "HumanEval_73_smallest_change", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector arr \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u305d\u306evector\u3092\u56de\u6587vector\u306b\u3059\u308b\u305f\u3081\u306b\u5909\u66f4\u3059\u308b\u8981\u7d20\u306e\u6700\u5c0f\u6570\u3092\u6c42\u3081\u3088\u3002\n// \u56de\u6587vector\u3068\u306f\u3001\u524d\u5f8c\u3067\u540c\u3058\u3088\u3046\u306b\u8aad\u3081\u308bvector\u306e\u3053\u3068\u3067\u3042\u308b\u3002\n// 1\u56de\u306e\u5909\u66f4\u3067\u30011\u3064\u306e\u8981\u7d20\u3092\u4ed6\u306e\u4efb\u610f\u306e\u8981\u7d20\u306b\u5909\u66f4\u3067\u304d\u308b\u3002\n// \u4f8b\u3048\u3070:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_73_smallest_change.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_73_smallest_change", "test": "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n}\n"}
{"name": "HumanEval_133_sum_squares", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6570\u5024\u306evector\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u4e0e\u3048\u3089\u308c\u305fvector\u5185\u306e\u6570\u5024\u306e2\u4e57\u306e\u548c\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002vector\u306e\u5404\u8981\u7d20\u306f\u307e\u305a\u6574\u6570\u5207\u308a\u4e0a\u3052\u51e6\u7406\u3067\u4e38\u3081\u308b\u3002\n// \u4f8b:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_133_sum_squares.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_133_sum_squares", "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));\n}\n"}
{"name": "HumanEval_141_file_name_check", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6709\u52b9\u3067\u3042\u308c\u3070'Yes'\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070'No'\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3002\n// \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6709\u52b9\u3067\u3042\u308b\u3068\u307f\u306a\u3055\u308c\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u3059\u3079\u3066\u6e80\u305f\u3059\u5834\u5408\u306e\u307f\u3067\u3042\u308b\uff1a\n// - \u30d5\u30a1\u30a4\u30eb\u540d\u306b3\u6841\uff08'0'-'9'\uff09\u4ee5\u4e0a\u306e\u6570\u5b57\u304c\u3042\u3063\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n// - \u30d5\u30a1\u30a4\u30eb\u540d\u306b\u30c9\u30c3\u30c8'.'\u304c\u4e00\u3064\u306e\u307f\u542b\u307e\u308c\u308b\uff09\n// - \u30c9\u30c3\u30c8\u306e\u524d\u306e\u90e8\u5206\u6587\u5b57\u5217\u306f\u7a7a\u3067\u3042\u3063\u3066\u306f\u306a\u3089\u305a\u3001\u30e9\u30c6\u30f3\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\uff08'a'-'z'\u304a\u3088\u3073'A'-'Z'\uff09\u304b\u3089\u59cb\u307e\u308b\u6587\u5b57\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// - \u30c9\u30c3\u30c8\u306e\u5f8c\u306e\u90e8\u5206\u6587\u5b57\u5217\u306f\u3001\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff1a ['txt', 'exe', 'dll']\n// \u4f8b:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_141_file_name_check.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_141_file_name_check", "test": "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero\u306f\u3001\u6574\u6570\u306evector\u3092\u5165\u529b\u3068\u3059\u308b\u3002\n// vector\u306e\u4e2d\u306b\u3001\u548c\u304c0\u306b\u306a\u308b\u8981\u7d20\u304c3\u3064\u5b58\u5728\u3059\u308c\u3070\u771f\u3092\u8fd4\u3057\u3001\n// \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u3002\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_40_triples_sum_to_zero", "test": "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));\n}\n"}
{"name": "HumanEval_127_intersection", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u533a\u9593\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\u305d\u308c\u305e\u308c\u306e\u533a\u9593\u306f\u6574\u6570\u306e\u7d44\u3067\u3042\u308b\u3002\n// \u4f8b\u3048\u3070\uff0c interval = (start, end) = (1, 2)\n// \u4e0e\u3048\u3089\u308c\u305f\u533a\u9593\u306f\u9589\u3058\u3066\u304a\u308a\u3001\u533a\u9593(start, end)\u306f\u958b\u59cb\u3068\u7d42\u4e86\u306e\u4e21\u65b9\u3092\u542b\u3080\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\n// \u4e0e\u3048\u3089\u308c\u305f\u5404\u533a\u9593\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u59cb\u70b9\u306f\u7d42\u70b9\u4ee5\u4e0b\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3055\u308c\u308b\u3002\n// \u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3001\u3053\u308c\u3089\u306e2\u3064\u306e\u533a\u9593\u306e\u4ea4\u70b9\u306e\u9577\u3055\u304c\u7d20\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n// \u4f8b:\n// \u533a\u9593(1, 3), (2, 4)\u306e\u4ea4\u70b9\u306f(2, 3)\u3067\u3001\u305d\u306e\u9577\u3055\u306f1\u3067\u3042\u308a\u3001\u7d20\u6570\u3067\u306f\u306a\u3044\u3002\n// \u4ea4\u70b9\u306e\u9577\u3055\u304c\u7d20\u6570\u3067\u3042\u308c\u3070 \"YES\"\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\"NO\"\u3092\u8fd4\u3059\u3002\n// \u4ea4\u70b9\u306e\u9577\u3055\u304c\u7d20\u6570\u3067\u3042\u308c\u3070 \"YES\"\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\"NO\"\u3092\u8fd4\u3059\u3002\n// 2\u3064\u306e\u533a\u9593\u304c\u4ea4\u5dee\u3057\u306a\u3044\u5834\u5408\u306f\"NO\"\u3092\u8fd4\u3059\u3002\n// [input/output] \u30b5\u30f3\u30d7\u30eb:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_127_intersection.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_127_intersection", "test": "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"}
{"name": "HumanEval_1_separate_paren_groups", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u3078\u306e\u5165\u529b\u306f\u3001\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u8907\u6570\u306e\u62ec\u5f27\u3092\u542b\u3080\u6587\u5b57\u5217\u3067\u3059\u3002\n// \u3042\u306a\u305f\u306e\u76ee\u7684\u306f\u3053\u308c\u3089\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u5225\u3005\u306e\u6587\u5b57\u5217\u306b\u5206\u5272\u3057\u3001\u305d\u308c\u3089\u306evector\u3092\u8fd4\u3059\u3053\u3068\u3067\u3059\u3002\n// \u533a\u5207\u3089\u308c\u305f\u30b0\u30eb\u30fc\u30d7\u306f\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u3066\u304a\u308a\uff08\u958b\u3044\u305f\u4e2d\u62ec\u5f27\u306f\u9069\u5207\u306b\u9589\u3058\u3089\u308c\u3066\u3044\u308b\uff09\u3001\u4e92\u3044\u306b\u5165\u308c\u5b50\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3002\n// \u5165\u529b\u6587\u5b57\u5217\u5185\u306e\u30b9\u30da\u30fc\u30b9\u306f\u7121\u8996\u3059\u308b\u3002\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_1_separate_paren_groups.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"(()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_1_separate_paren_groups", "test": "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"(()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"}
{"name": "HumanEval_152_compare", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5f85\u3061\u306b\u5f85\u3063\u305f\u51fa\u6765\u4e8b\u306e\u7d50\u679c\u304c\u3088\u3046\u3084\u304f\u5224\u660e\u3057\u305f\u3068\u304d\u306e\u3042\u306e\u611f\u899a\u306f\u3001\u8ab0\u306b\u3067\u3082\u899a\u3048\u304c\u3042\u308b\u3068\u601d\u3046\u3002\n// \u305d\u306e\u77ac\u9593\u306b\u62b1\u3044\u305f\u611f\u60c5\u3084\u601d\u8003\u306f\u3001\u9593\u9055\u3044\u306a\u304f\u30e1\u30e2\u3057\u3066\u6bd4\u8f03\u3059\u308b\u4fa1\u5024\u304c\u3042\u308b\u3002\n// \u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3001\u3042\u308b\u4eba\u304c\u3044\u304f\u3064\u304b\u306e\u8a66\u5408\u306e\u7d50\u679c\u3092\u6b63\u3057\u304f\u63a8\u6e2c\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n// \u540c\u3058\u9577\u3055\u306e\u5f97\u70b9\u3068\u63a8\u6e2c\u5024\u306e2\u3064\u306evector\u304c\u4e0e\u3048\u3089\u308c\u3001\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u4e00\u81f4\u3092\u793a\u3059\u3002\n// \u305d\u308c\u305e\u308c\u306e\u63a8\u6e2c\u304c\u3069\u308c\u3060\u3051\u305a\u308c\u3066\u3044\u305f\u304b\u3092\u793a\u3059\u540c\u3058\u9577\u3055\u306evector\u3092\u8fd4\u3059\u3002\n// \u63a8\u6e2c\u304c\u6b63\u3057\u3051\u308c\u3070\u305d\u306e\u5024\u306f0\u3067\u3042\u308a\u3001\u6b63\u3057\u304f\u306a\u3051\u308c\u3070\u63a8\u6e2c\u3068\u5f97\u70b9\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_152_compare.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_152_compare", "test": "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n"}
{"name": "HumanEval_83_starts_one_ends", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570 n \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001n \u6841\u306e\u6b63\u306e\u6574\u6570\u306e\u3046\u3061 1 \u3067\u59cb\u307e\u308b\u304b\u7d42\u308f\u308b\u3082\u306e\u306e\u6570\u3092\u8fd4\u3059\u3002\nlong starts_one_ends(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_83_starts_one_ends.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_83_starts_one_ends", "test": "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n}\n"}
{"name": "HumanEval_134_check_if_last_char_is_a_letter", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u6700\u5f8c\u306e\u6587\u5b57\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u3001\u304b\u3064\u5358\u8a9e\u306e\u4e00\u90e8\u3067\u306a\u3051\u308c\u3070\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3002\n// \u6ce8: \"\u5358\u8a9e\"\u3068\u306f\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u6587\u5b57\u306e\u96c6\u307e\u308a\u3067\u3042\u308b\u3002\n// \u4f8b:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_134_check_if_last_char_is_a_letter.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = check_if_last_char_is_a_letter;\n    assert(candidate((\"apple\")) == (false));\n    assert(candidate((\"apple pi e\")) == (true));\n    assert(candidate((\"eeeee\")) == (false));\n    assert(candidate((\"A\")) == (true));\n    assert(candidate((\"Pumpkin pie \")) == (false));\n    assert(candidate((\"Pumpkin pie 1\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"eeeee e \")) == (false));\n    assert(candidate((\"apple pie\")) == (false));\n    assert(candidate((\"apple pi e \")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_134_check_if_last_char_is_a_letter", "test": "}\nint main() {\n    auto candidate = check_if_last_char_is_a_letter;\n    assert(candidate((\"apple\")) == (false));\n    assert(candidate((\"apple pi e\")) == (true));\n    assert(candidate((\"eeeee\")) == (false));\n    assert(candidate((\"A\")) == (true));\n    assert(candidate((\"Pumpkin pie \")) == (false));\n    assert(candidate((\"Pumpkin pie 1\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"eeeee e \")) == (false));\n    assert(candidate((\"apple pie\")) == (false));\n    assert(candidate((\"apple pi e \")) == (false));\n}\n"}
{"name": "HumanEval_124_valid_date", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u65e5\u4ed8\u6587\u5b57\u5217\u3092\u691c\u8a3c\u3057\u3001\u305d\u306e\u65e5\u4ed8\u304c\u6709\u52b9\u3067\u3042\u308c\u3070\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u65e5\u4ed8\u304c\u6709\u52b9\u3067\u3042\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u304c\u3059\u3079\u3066\u6e80\u305f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3042\u308b\uff1a\n// 1. \u65e5\u4ed8\u6587\u5b57\u5217\u306f\u7a7a\u3067\u306a\u3044\u3002\n// 2. \u67081,3,5,7,8,10,12\u306b\u3064\u3044\u3066\u306f\u3001\u65e5\u6570\u304c1\u4ee5\u4e0a31\u65e5\u4ee5\u4e0b\u3067\u3042\u308b\u3002\u307e\u305f\u3001\u67084,6,9,11\u306b\u3064\u3044\u3066\u306f\u3001\u65e5\u6570\u304c1\u4ee5\u4e0a30\u65e5\u4ee5\u4e0b\u3067\u3042\u308b\u3002\u307e\u305f\u3001\u67082\u306f\u65e5\u6570\u304c1\u4ee5\u4e0a29\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n// 3. \u6708\u306f1\u4ee5\u4e0a12\u4ee5\u4e0b\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// 4. \u65e5\u4ed8\u306e\u66f8\u5f0f\u306fmm-dd-yyyy\u3068\u3059\u308b\u3002\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_124_valid_date.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_124_valid_date", "test": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"}
{"name": "HumanEval_108_count_nums", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector\u3092\u53d7\u3051\u53d6\u308a\u3001\u6841\u6570\u306e\u548c\u304c0\u3092\u8d85\u3048\u308b\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\u95a2\u6570count_nums\u3092\u66f8\u3051\u3002\n// \u3042\u308b\u6570\u5024\u304c\u8ca0\u306a\u3089\u3001\u305d\u306e\u6700\u521d\u306e\u7b26\u53f7\u4ed8\u304d\u6841\u306f\u8ca0\u306b\u306a\u308b\uff1a\n// e.g. -123\u306f\u7b26\u53f7\u4ed8\u304d\u6841\u304c-1\u30012\u30013\u3067\u3042\u308b\u3002\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_108_count_nums.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_108_count_nums", "test": "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n}\n"}
{"name": "HumanEval_86_anti_shuffle", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u9806\u5e8f\u4ed8\u304d\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// \u6587\u5b57\u5217\u306e\u9806\u5e8f\u4ed8\u304d\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001\uff08\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\uff09\u3059\u3079\u3066\u306e\u5358\u8a9e\u304c\u3001\n// \u3059\u3079\u3066\u306e\u6587\u5b57\u304c\u30a2\u30b9\u30ad\u30fc\u5024\u306b\u57fa\u3065\u3044\u3066\u6607\u9806\u306b\u914d\u7f6e\u3055\u308c\u305f\u65b0\u3057\u3044\u5358\u8a9e\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u3067\u3059\u3002\n// \u6ce8\uff1a\u6587\u4e2d\u306e\u5358\u8a9e\u3068\u7a7a\u767d\u306e\u9806\u5e8f\u306f\u7dad\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// \u4f8b\u3048\u3070:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_86_anti_shuffle.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = anti_shuffle;\n    assert(candidate((\"Hi\")) == (\"Hi\"));\n    assert(candidate((\"hello\")) == (\"ehllo\"));\n    assert(candidate((\"number\")) == (\"bemnru\"));\n    assert(candidate((\"abcd\")) == (\"abcd\"));\n    assert(candidate((\"Hello World!!!\")) == (\"Hello !!!Wdlor\"));\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hi. My name is Mister Robot. How are you?\")) == (\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_86_anti_shuffle", "test": "}\nint main() {\n    auto candidate = anti_shuffle;\n    assert(candidate((\"Hi\")) == (\"Hi\"));\n    assert(candidate((\"hello\")) == (\"ehllo\"));\n    assert(candidate((\"number\")) == (\"bemnru\"));\n    assert(candidate((\"abcd\")) == (\"abcd\"));\n    assert(candidate((\"Hello World!!!\")) == (\"Hello !!!Wdlor\"));\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hi. My name is Mister Robot. How are you?\")) == (\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n"}
{"name": "HumanEval_48_is_palindrome", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_48_is_palindrome.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_48_is_palindrome", "test": "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n"}
{"name": "HumanEval_118_get_closest_vowel", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5358\u8a9e\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n// \u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3001\u5358\u8a9e\u306e\u53f3\u5074\u304b\u30892\u3064\u306e\u5b50\u97f3\u306b\u631f\u307e\u308c\u305f\u6bcd\u97f3\u306e\u4e2d\u304b\u3089\u6700\u3082\u8fd1\u3044\u3082\u306e\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u3067\u3059\uff08\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u306f\u533a\u5225\u3059\u308b\u3053\u3068\uff09\u3002\n// \u6700\u521d\u3068\u6700\u5f8c\u306e\u6bcd\u97f3\u306f\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u306a\u3044\u3002\n// \u4e0a\u8a18\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u6bcd\u97f3\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u7a7a\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u6307\u5b9a\u3055\u308c\u305f\u6587\u5b57\u5217\u306f\u82f1\u5b57\u306e\u307f\u3092\u542b\u3080\u3068\u307f\u306a\u3057\u3066\u3088\u3044\u3002\n// \u4f8b:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_118_get_closest_vowel.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_118_get_closest_vowel", "test": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"}
{"name": "HumanEval_31_is_prime", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6570\u304c\u7d20\u6570\u3067\u3042\u308c\u3070\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u3002\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_31_is_prime.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_31_is_prime", "test": "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n}\n"}
{"name": "HumanEval_144_simplify", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u306f\u3001x * n\u304c\u6574\u6570\u306b\u8a55\u4fa1\u3055\u308c\u308c\u3070\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u3002\n// x\u3068n\u306f\u3069\u3061\u3089\u3082\u5206\u6570\u306e\u6587\u5b57\u5217\u8868\u73fe\u3067\u3042\u308a\u3001\u6b21\u306e\u3088\u3046\u306a\u66f8\u5f0f\u3092\u6301\u3064\u3002\n// <\u5206\u5b50>/<\u5206\u6bcd> (\u5206\u5b50\u3068\u5206\u6bcd\u306f\u3068\u3082\u306b\u6b63\u306e\u6574\u6570)\n// x\u3068n\u306f\u6709\u52b9\u306a\u5206\u6570\u3067\u3042\u308a\u3001\u5206\u6bcd\u306b0\u3092\u6301\u305f\u306a\u3044\u3082\u306e\u3068\u4eee\u5b9a\u3057\u3066\u3088\u3044\u3002\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_144_simplify.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\")) == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/5\"), (\"1/5\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_144_simplify", "test": "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\")) == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/5\"), (\"1/5\")) == (false));\n}\n"}
{"name": "HumanEval_78_hex_key", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3042\u306a\u305f\u306f\u300116\u9032\u6570\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u7d20\u6570\u3067\u3042\u308b16\u9032\u6570\u306e\u6841\u6570\u3092\u6570\u3048\u308b\u95a2\u6570\u3092\u66f8\u304f\u3088\u3046\u306b\u547d\u3058\u3089\u308c\u305f\u3002\n//  (\u7d20\u6570\u3068\u306f\u30011\u3088\u308a\u5927\u304d\u304f\u30012\u3088\u308a\u5c0f\u3055\u3044\u81ea\u7136\u6570\u306e\u7a4d\u3067\u306f\u306a\u3044\u81ea\u7136\u6570\u306e\u3053\u3068\uff09\n// 16\u9032\u6570: 0\u30011\u30012\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u3001A\u3001B\u3001C\u3001D\u3001E\u3001F\n// \u7d20\u6570: 2\u30013\u30015\u30017\u300111\u300113\u300117\u3001...\n// \u3064\u307e\u308a\u30012,3,5,7...\u306e\u6570\u5b57\u3092\u6c7a\u3081\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// B (=10\u9032\u6570 11), D (=10\u9032\u6570 13)\n// \u6ce8\uff1a\u5165\u529b\u306f\u5e38\u306b\u6b63\u3057\u3044\u304b\u7a7a\u6587\u5b57\u5217\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3088\u3044\u3001 \u8a18\u53f7A,B,C,D,E,F\u306f\u5e38\u306b\u5927\u6587\u5b57\u3067\u3042\u308b\u3002\n// \u4f8b:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_78_hex_key.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_78_hex_key", "test": "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n"}
{"name": "HumanEval_143_words_in_sentence", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3042\u308b\u6587\u7ae0\u3092\u8868\u3059\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u6587\u5b57\u5217\u306f\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u304c\u3044\u304f\u3064\u304b\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n// \u5143\u306e\u6587\u5b57\u5217\u306e\u5358\u8a9e\u3092\u542b\u3080\u6587\u5b57\u5217\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u305d\u306e\u9577\u3055\u306f\u7d20\u6570\u3067\u3042\u308b\u3002\n// \u65b0\u3057\u3044\u6587\u5b57\u5217\u306e\u5358\u8a9e\u306e\u9806\u5e8f\u306f\u3001\u5143\u306e\u6587\u5b57\u5217\u3068\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u4f8b 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_143_words_in_sentence.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_143_words_in_sentence", "test": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"}
{"name": "HumanEval_111_histogram", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5c0f\u6587\u5b57\u3092\u8868\u3059\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\n// \u6700\u3082\u7e70\u308a\u8fd4\u3057\u306e\u591a\u3044\u6587\u5b57\u3068\u305d\u306e\u6570\u3092\u30de\u30c3\u30d7\u3067\u8fd4\u3059\u3002\n// \u8907\u6570\u306e\u6587\u5b57\u304c\u540c\u3058\u51fa\u73fe\u56de\u6570\u3092\u6301\u3064\u5834\u5408\u306f\u3001\u305d\u308c\u3089\u3059\u3079\u3066\u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u4f8b:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_111_histogram.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_111_histogram", "test": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n"}
{"name": "HumanEval_87_get_row", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u304c\u4e0e\u3048\u3089\u308c\u308b\u3001\n// \u3053\u308c\u306f\u884c\u5217\u306b\u4f3c\u3066\u3044\u308b\u304c\u3001\u884c\u5217\u3068\u306f\u7570\u306a\u308a\u3001\u5404\u884c\u306f\u7570\u306a\u308b\u6570\u306e\u5217\u3092\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n// \u5f15\u6570lst\u3068\u6574\u6570x\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001lst\u304b\u3089\u6574\u6570x\u3092\u898b\u3064\u3051\u3001\n// \u5404\u30da\u30a2\u304c0\u304b\u3089\u59cb\u307e\u308b\u5ea7\u6a19\uff08\u884c\u3001\u5217\uff09\u3067\u3042\u308b\u3088\u3046\u306a\u30da\u30a2[(x1, y1), (x2, y2) ...]\u306evector\u3092\u8fd4\u3059\u3002\n// \u5ea7\u6a19\u3092\u6700\u521d\u306f\u884c\u306e\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u3002\n// \u307e\u305f\u3001\u884c\u306e\u5ea7\u6a19\u3092\u5217\u306e\u964d\u9806\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3002\n// \u4f8b:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_87_get_row.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_87_get_row", "test": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n"}
{"name": "HumanEval_123_get_odd_collatz", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570 n \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u30b3\u30e9\u30c3\u30c4\u6570\u5217\u306e\u5947\u6570\u3092\u6301\u3064\u30bd\u30fc\u30c8\u6e08\u307fvector\u3092\u8fd4\u3059\u3002\n// \u30b3\u30e9\u30c3\u30c4\u4e88\u60f3\u3068\u306f\u6570\u5b66\u306e\u4e88\u60f3\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u6570\u5217\u306b\u95a2\u3059\u308b\u3082\u306e\u3067\u3042\u308b\uff1a\n// \u4efb\u610f\u306e\u6b63\u306e\u6574\u6570n\u304b\u3089\u59cb\u3081\u308b\u3002\n// \u524d\u306e\u9805\u304c\u5076\u6570\u306e\u5834\u5408\u3001\u6b21\u306e\u9805\u306f\u524d\u306e\u9805\u306e\u534a\u5206\u3067\u3042\u308b\u3002\n// \u524d\u306e\u9805\u304c\u5947\u6570\u306e\u5834\u5408\u3001\u6b21\u306e\u9805\u306f\u524d\u306e\u9805\u306e3\u500d\uff0b1\u3067\u3042\u308b\u3002\n// n\u304c\u3069\u306e\u3088\u3046\u306a\u5024\u3067\u3042\u3063\u3066\u3082\u3001\u6570\u5217\u306f\u5fc5\u305a1\u306b\u9054\u3059\u308b\u3002\n// \u6ce8:\n// 1. Collatz(1) \u306f [1].\n// 2. \u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u305fvector\u3092\u8fd4\u3059\u3002\n// \u4f8b\u3048\u3070:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_123_get_odd_collatz.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_123_get_odd_collatz", "test": "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n}\n"}
{"name": "HumanEval_135_can_arrange", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u76f4\u524d\u306e\u8981\u7d20\u4ee5\u4e0a\u3067\u306a\u3044\u8981\u7d20\u306e\u6700\u5927\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3002\n// \u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f -1 \u3092\u8fd4\u3059\u3002\u4e0e\u3048\u3089\u308c\u308bvector\u306b\u306f\u91cd\u8907\u3057\u305f\u5024\u306f\u542b\u307e\u308c\u307e\u305b\u3093\u3002\n// \u4f8b:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_135_can_arrange.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_135_can_arrange", "test": "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n}\n"}
{"name": "HumanEval_19_sort_numbers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5165\u529b\u306f\u3001'0'\u304b\u3089'9'\u307e\u3067\u306e\u6570\u5b57\u3092\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3063\u305f\u6587\u5b57\u5217\u3067\u3042\u308b\u3002\n// \u6709\u52b9\u306a\u9078\u629e\u80a2\u306f'0'\u3001'1'\u3001'2'\u3001'3'\u3001'4'\u3001'5'\u3001'6'\u3001'7'\u3001'8'\u3001'9'\u3002\n// \u6570\u5b57\u3092\u5c0f\u3055\u3044\u3082\u306e\u304b\u3089\u5927\u304d\u3044\u3082\u306e\u3078\u3068\u30bd\u30fc\u30c8\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\u3002\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_19_sort_numbers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_19_sort_numbers", "test": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"}
{"name": "HumanEval_65_circular_shift", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570 x \u306e\u6841\u3092\u5186\u30b7\u30d5\u30c8\u3057\u3001shift \u6841\u3060\u3051\u53f3\u30b7\u30d5\u30c8\u3057\u3001\u7d50\u679c\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3059\u3002\n// shift > \u6841\u6570\u306e\u5834\u5408\u3001\u6841\u3092\u53cd\u8ee2\u3057\u3066\u8fd4\u3059\u3002\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_65_circular_shift.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_65_circular_shift", "test": "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"}
{"name": "HumanEval_142_sum_squares", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u306f\u6574\u6570\u306evector\u3092\u53d7\u3051\u53d6\u308b\u3002\n// vector\u5185\u306e\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u3064\u3044\u3066\u3001\n// \u305d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c3\u306e\u500d\u6570\u3067\u3042\u308c\u3070\u6574\u6570\u306e\u30a8\u30f3\u30c8\u30ea\u30922\u4e57\u3057\u3001\n// \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c4\u306e\u500d\u6570\u30673\u306e\u500d\u6570\u3067\u306a\u3051\u308c\u3070\u6574\u6570\u306e\u30a8\u30f3\u30c8\u30ea\u30923\u4e57\u3059\u308b\u3002\n// \u3053\u306e\u95a2\u6570\u306f vector\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c3\u306e\u500d\u6570\u3067\u30824\u306e\u500d\u6570\u3067\u3082\u306a\u3044\u30a8\u30f3\u30c8\u30ea\u3092\u5909\u66f4\u3057\u306a\u3044\u3002\n// \u305d\u3057\u3066\u3001\u3053\u306e\u95a2\u6570\u306f\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306e\u5408\u8a08\u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_142_sum_squares.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));\n    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));\n    assert(candidate((std::vector<long>({(long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));\n    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));\n    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_142_sum_squares", "test": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));\n    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));\n    assert(candidate((std::vector<long>({(long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));\n    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));\n    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));\n}\n"}
{"name": "HumanEval_94_skjkasdkd", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u6700\u5927\u306e\u7d20\u6570\u3092\u6c42\u3081\u3001\u305d\u306e\u6841\u6570\u306e\u548c\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n// \u4f8b:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_94_skjkasdkd.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191}))) == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_94_skjkasdkd", "test": "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191}))) == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));\n}\n"}
{"name": "HumanEval_8_sum_product", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306evector\u306b\u5bfe\u3057\u3066\u3001vector\u5185\u306e\u3059\u3079\u3066\u306e\u6574\u6570\u306e\u548c\u3068\u7a4d\u304b\u3089\u306a\u308b\u30da\u30a2\u3092\u8fd4\u3059\u3002\n// \u7a7a\u306e\u548c\u306f 0 \u306b\u7b49\u3057\u304f\u3001\u7a7a\u306e\u7a4d\u306f 1 \u306b\u7b49\u3057\u3044\u3002\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_8_sum_product.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_8_sum_product", "test": "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));\n}\n"}
{"name": "HumanEval_102_choose_num", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570x\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u6841\u3092\u6301\u305f\u306a\u3044\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3057\u305fvector\u3092\u8fd4\u3059\u3002\n// \u6ce8: \u8fd4\u3055\u308c\u308bvector\u306f\u3001\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// \u4f8b\u3048\u3070:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_102_choose_num.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_102_choose_num", "test": "}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"}
{"name": "HumanEval_136_largest_smallest_integers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// vector lst\u306b\u542b\u307e\u308c\u308b\u8ca0\u306e\u6574\u6570\u306e\u3046\u3061\u6700\u5927\u306e\u3082\u306e\u3092'a'\u3001\u6b63\u306e\u6574\u6570\u306e\u3046\u3061\u6700\u5c0f\u306e\u3082\u306e\u3092'b'\u3068\u3059\u308b\u30da\u30a2(a, b)\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308b\u3002\n// \u8ca0\u6574\u6570\u3082\u6b63\u6574\u6570\u3082\u306a\u3044\u5834\u5408\u306f\u7a7a\u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_136_largest_smallest_integers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_136_largest_smallest_integers", "test": "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n}\n"}
{"name": "HumanEval_16_count_distinct_characters", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3042\u308b\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u305d\u306e\u6587\u5b57\u5217\u304c\uff08\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306b\u95a2\u4fc2\u306a\u304f\uff09\u3044\u304f\u3064\u306e\u660e\u78ba\u306a\u6587\u5b57\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u306a\u3055\u3044\u3002\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_16_count_distinct_characters.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_16_count_distinct_characters", "test": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"}
{"name": "HumanEval_100_make_a_pile", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001n\u6bb5\u306e\u77f3\u306e\u5c71\u3092\u4f5c\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u6700\u521d\u306e\u30ec\u30d9\u30eb\u306b\u306fn\u500b\u306e\u77f3\u304c\u3042\u308b\u3002\n// \u6b21\u306e\u6bb5\u306e\u77f3\u306e\u6570\u306f\n//  - n\u304c\u5947\u6570\u306a\u3089\u6b21\u306e\u5947\u6570\u3002\n//  - n\u304c\u5076\u6570\u306a\u3089\u6b21\u306e\u5076\u6570\u3002\n// \u5404\u30ec\u30d9\u30eb\u306e\u77f3\u306e\u6570\u3092vector\u3067\u8fd4\u3059\u3002i \u306f\u30ec\u30d9\u30eb (i+1) \u306e\u77f3\u306e\u6570\u3092\u8868\u3057\u307e\u3059\u3002\n// \u4f8b:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_100_make_a_pile.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_100_make_a_pile", "test": "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n"}
{"name": "HumanEval_128_prod_signs", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector arr \u304c\u4e0e\u3048\u3089\u308c\u308b\u30021, -1, 0\u3067\u8868\u3055\u308c\u305fvector\u306e\u5404\u6570\u306e\u7b26\u53f7\u306e\u7a4d\u3092\u4e57\u3058\u305f\u6574\u6570\u306e\u5927\u304d\u3055\u306e\u548c\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n// \u6ce8: arr \u304c\u7a7a\u306e\u5834\u5408\u306f null \u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u4f8b:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_128_prod_signs.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_128_prod_signs", "test": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n"}
{"name": "HumanEval_114_minSubArraySum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570nums\u306evector\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001nums\u306e\u7a7a\u3067\u306a\u3044\u90e8\u5206vector\u306e\u6700\u5c0f\u548c\u3092\u6c42\u3081\u3088\u3002\n// \u4f8b\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_114_minSubArraySum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10}))) == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_114_minSubArraySum", "test": "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10}))) == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"}
{"name": "HumanEval_15_string_sequence", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305f 0 \u304b\u3089 n \u307e\u3067\u306e\u6570\u5024\u3092\u542b\u3080\u6587\u5b57\u5217\u3092\u8fd4\u3059\u3002\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_15_string_sequence.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_15_string_sequence", "test": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"}
{"name": "HumanEval_154_cycpattern_check", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u5358\u8a9e\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// 2\u756a\u76ee\u306e\u5358\u8a9e\u307e\u305f\u306f\u305d\u306e\u56de\u8ee2\u304c\u30011\u756a\u76ee\u306e\u5358\u8a9e\u306e\u90e8\u5206\u6587\u5b57\u5217\u3067\u3042\u308b\u5834\u5408\u306b\u771f\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_154_cycpattern_check.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_154_cycpattern_check", "test": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n"}
{"name": "HumanEval_57_monotonic", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// vector\u306e\u8981\u7d20\u304c\u5358\u8abf\u5897\u52a0\u307e\u305f\u306f\u5358\u8abf\u6e1b\u5c11\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u771f\u3092\u8fd4\u3059\u3002\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_57_monotonic.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_57_monotonic", "test": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n"}
{"name": "HumanEval_12_longest", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u306evector\u306e\u3046\u3061\u3001\u6700\u3082\u9577\u3044\u3082\u306e\u3092\u8fd4\u3059\u3002\u8907\u6570\u306e\n// \u540c\u3058\u9577\u3055\u306e\u6587\u5b57\u5217\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u6700\u521d\u306e\u3082\u306e\u3092\u8fd4\u3059\u3002\u5165\u529bvector\u304c\u7a7a\u306e\u5834\u5408\u306fnull\u3092\u8fd4\u3059\u3002\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_12_longest.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_12_longest", "test": "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"}
{"name": "HumanEval_52_below_threshold", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// vector l\u306e\u3059\u3079\u3066\u306e\u6570\u5024\u304c\u95be\u5024t\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u771f\u3092\u8fd4\u3059\u3002\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_52_below_threshold.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_52_below_threshold", "test": "}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"}
{"name": "HumanEval_75_is_multiply_prime", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6570\u304c3\u3064\u306e\u7d20\u6570\u306e\u639b\u3051\u7b97\u3067\u3042\u308c\u3070\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// (a)\u306f100\u3088\u308a\u5c0f\u3055\u3044\u3002\n// \u4f8b:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_75_is_multiply_prime.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_75_is_multiply_prime", "test": "}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n}\n"}
{"name": "HumanEval_30_get_positive", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// vector\u306b\u542b\u307e\u308c\u308b\u6b63\u306e\u6570\u3060\u3051\u3092\u8fd4\u3059\u3002\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_30_get_positive.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_30_get_positive", "test": "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"}
{"name": "HumanEval_33_sort_third", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u306f\u3001vectorl\u3092\u53d7\u3051\u53d6\u308a\u3001vectorl'\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n// l'\u306f3\u3067\u5272\u308a\u5207\u308c\u306a\u3044\u7d22\u5f15\u3067\u306fl\u306e\u7d22\u5f15\u3068\u540c\u4e00\u306e\u5024\u3068\u306a\u308a\u30013\u3067\u5272\u308a\u5207\u308c\u308b\u7d22\u5f15\u3067\u306fl\u3092\u30bd\u30fc\u30c8\u3057\u305fvector\u306e\u7d22\u5f15\u306e\u5024\u304c\u5165\u308a\u307e\u3059\u3002\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_33_sort_third.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_33_sort_third", "test": "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n"}
{"name": "HumanEval_6_parse_nested_parens", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u3078\u306e\u5165\u529b\u306f\u3001\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u62ec\u5f27\u306e\u8907\u6570\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3063\u3066\u8868\u3057\u305f\u6587\u5b57\u5217\u3067\u3042\u308b\u3002\n// \u5404\u30b0\u30eb\u30fc\u30d7\u306b\u3064\u3044\u3066\u3001\u62ec\u5f27\u306e\u5165\u308c\u5b50\u306e\u6700\u3082\u6df1\u3044\u30ec\u30d9\u30eb\u3092\u51fa\u529b\u3059\u308b\u3002\n// \u4f8b\u3048\u3070\u3001(()())\u306e\u5165\u308c\u5b50\u306f\u6700\u59272\u30ec\u30d9\u30eb\u3067\u3042\u308b\u306e\u306b\u5bfe\u3057\u3001(()))\u306f3\u30ec\u30d9\u30eb\u3067\u3042\u308b\u3002\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_6_parse_nested_parens.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_6_parse_nested_parens", "test": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n"}
{"name": "HumanEval_45_triangle_area", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e09\u89d2\u5f62\u306e\u4e00\u8fba\u306e\u9577\u3055\u3068\u9ad8\u3055\u65b9\u5411\u306e\u9762\u7a4d\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_45_triangle_area.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5), (3)) == (7.5f));\n    assert(candidate((2), (2)) == (2.0f));\n    assert(candidate((10), (8)) == (40.0f));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_45_triangle_area", "test": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5), (3)) == (7.5f));\n    assert(candidate((2), (2)) == (2.0f));\n    assert(candidate((10), (8)) == (40.0f));\n}\n"}
{"name": "HumanEval_97_multiply", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u6574\u6570\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u5358\u4f4d\u6841\u6570\u306e\u7a4d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b8c\u6210\u3055\u305b\u3088\u3002\n// \u5165\u529b\u306f\u5e38\u306b\u6709\u52b9\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3059\u308b\u3002\n// \u4f8b:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_97_multiply.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_97_multiply", "test": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"}
{"name": "HumanEval_4_mean_absolute_deviation", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u5165\u529b\u6570\u5024\u306evector\u306b\u5bfe\u3057\u3066\u3001\n// \u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5e73\u5747\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u5e73\u5747\u7d76\u5bfe\u504f\u5dee\u3092\u8a08\u7b97\u3059\u308b\u3002\n// \u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5e73\u5747\u3092\u4e2d\u5fc3\u306b\u8a08\u7b97\u3059\u308b\u3002\n// \u5e73\u5747\u7d76\u5bfe\u504f\u5dee\u3068\u306f\u3001\u5404\u8981\u7d20\u3068\u4e2d\u5fc3\u70b9\uff08\u3053\u306e\u5834\u5408\u306f\u5e73\u5747\uff09\u3068\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u306e\u5e73\u5747\u3067\u3042\u308b\u3002\n// \u5404\u8981\u7d20\u3068\u4e2d\u5fc3\u70b9\uff08\u3053\u306e\u5834\u5408\u306f\u5e73\u5747\uff09\u3068\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u306e\u5e73\u5747\u3067\u3042\u308b\uff1a\n// MAD = \u5e73\u5747\u5024 | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_4_mean_absolute_deviation.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_4_mean_absolute_deviation", "test": "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n}\n"}
{"name": "HumanEval_58_common", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306evector\u306b\u3064\u3044\u3066\u3001\u4e00\u610f\u306a\u5171\u901a\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3057\u3066\u8fd4\u3059\u3002\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_58_common.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_58_common", "test": "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"}
{"name": "HumanEval_156_int_to_mini_roman", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u305d\u306e\u30ed\u30fc\u30de\u6570\u5b57\u306b\u76f8\u5f53\u3059\u308b\u6587\u5b57\u5217\u3092\u5c0f\u6587\u5b57\u3067\u8fd4\u3059\u3002\n// \u5236\u9650\u4e8b\u9805: 1 <= num <= 1000\n// \u4f8b:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_156_int_to_mini_roman.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19)) == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251)) == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500)) == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4)) == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90)) == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532)) == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994)) == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_156_int_to_mini_roman", "test": "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19)) == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251)) == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500)) == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4)) == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90)) == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532)) == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994)) == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"}
{"name": "HumanEval_67_fruit_distribution", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u8ab2\u984c\u3067\u306f\u3001\u30ea\u30f3\u30b4\u3068\u30aa\u30ec\u30f3\u30b8\u306e\u6570\u3092\u8868\u3059\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u30ab\u30b4\u306b\u306f\u30ea\u30f3\u30b4\u3001\u30aa\u30ec\u30f3\u30b8\u3001\u30de\u30f3\u30b4\u30fc\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n// \u30aa\u30ec\u30f3\u30b8\u3068\u30ea\u30f3\u30b4\u306e\u7dcf\u6570\u3092\u8868\u3059\u6587\u5b57\u5217\u3068\u3001\u304b\u3054\u306e\u4e2d\u306e\u679c\u7269\u306e\u7dcf\u6570\u3092\u8868\u3059\u6574\u6570\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u304b\u3054\u306e\u4e2d\u306e\u30de\u30f3\u30b4\u30fc\u306e\u679c\u7269\u306e\u6570\u3092\u8fd4\u3059\u3002\n// \u4f8b\u3048\u3070:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_67_fruit_distribution.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100 oranges\"), (120)) == (19));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_67_fruit_distribution", "test": "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100 oranges\"), (120)) == (19));\n}\n"}
{"name": "HumanEval_112_reverse_delete", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u30bf\u30b9\u30af\n// s\u3068c\u306e2\u3064\u306e\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001s\u306e\u4e2d\u306b\u3042\u308b\u6587\u5b57\u3067c\u306e\u4e2d\u306b\u3042\u308b\u6587\u5b57\u3068\u7b49\u3057\u3044\u3082\u306e\u3092\u3059\u3079\u3066\u524a\u9664\u3057\u3001\u305d\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u3002\n// \u6587\u5b57\u5217\u306f\u3001\u524d\u65b9\u3068\u5f8c\u65b9\u3067\u540c\u3058\u3088\u3046\u306b\u8aad\u3081\u308b\u5834\u5408\u3001\u56de\u6587\u3068\u547c\u3070\u308c\u307e\u3059\u3002\n// \u7d50\u679c\u306e\u6587\u5b57\u5217\u3068\u3001\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306e\u771f\u507d\u5024\u306e\u30da\u30a2\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// \u4f8b\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_112_reverse_delete.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = reverse_delete;\n    assert(candidate((\"abcde\"), (\"ae\")) == (std::make_tuple(\"bcd\", false)));\n    assert(candidate((\"abcdef\"), (\"b\")) == (std::make_tuple(\"acdef\", false)));\n    assert(candidate((\"abcdedcba\"), (\"ab\")) == (std::make_tuple(\"cdedc\", true)));\n    assert(candidate((\"dwik\"), (\"w\")) == (std::make_tuple(\"dik\", false)));\n    assert(candidate((\"a\"), (\"a\")) == (std::make_tuple(\"\", true)));\n    assert(candidate((\"abcdedcba\"), (\"\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"abcdedcba\"), (\"v\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"vabba\"), (\"v\")) == (std::make_tuple(\"abba\", true)));\n    assert(candidate((\"mamma\"), (\"mia\")) == (std::make_tuple(\"\", true)));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_112_reverse_delete", "test": "}\nint main() {\n    auto candidate = reverse_delete;\n    assert(candidate((\"abcde\"), (\"ae\")) == (std::make_tuple(\"bcd\", false)));\n    assert(candidate((\"abcdef\"), (\"b\")) == (std::make_tuple(\"acdef\", false)));\n    assert(candidate((\"abcdedcba\"), (\"ab\")) == (std::make_tuple(\"cdedc\", true)));\n    assert(candidate((\"dwik\"), (\"w\")) == (std::make_tuple(\"dik\", false)));\n    assert(candidate((\"a\"), (\"a\")) == (std::make_tuple(\"\", true)));\n    assert(candidate((\"abcdedcba\"), (\"\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"abcdedcba\"), (\"v\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"vabba\"), (\"v\")) == (std::make_tuple(\"abba\", true)));\n    assert(candidate((\"mamma\"), (\"mia\")) == (std::make_tuple(\"\", true)));\n}\n"}
{"name": "HumanEval_13_greatest_common_divisor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u6574\u6570 a \u3068 b \u306e\u6700\u5927\u516c\u7d04\u6570\u3092\u8fd4\u3059\u3002\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_13_greatest_common_divisor", "test": "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"}
{"name": "HumanEval_125_split_words", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// \u5358\u8a9e\u306e\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u7a7a\u767d\u3067\u5206\u5272\u3055\u308c\u305f\u5358\u8a9e\u306evector\u3092\u8fd4\u3057\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306b\u7a7a\u767d\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30ab\u30f3\u30de ',' \u3067\u5206\u5272\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// \u30ab\u30f3\u30de\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5185\u306e\u5947\u6570\u9806\u5e8f\u306e\u5c0f\u6587\u5b57\u306e\u6570\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n// ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// \u4f8b\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_125_split_words.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_125_split_words", "test": "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n"}
{"name": "HumanEval_116_sort_array", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u578b\u3067\u306f\u3001\u975e\u8ca0\u6574\u6570\u306evector\u3092\u30012\u9032\u6570\u8868\u73fe\u306b\u304a\u3051\u308b1\u306e\u6570\u306b\u5f93\u3063\u3066\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u3002\n// \u540c\u30581\u306e\u6570\u306e\u5834\u5408\u306f\u300110\u9032\u6570\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3002\n// \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3068\u306a\u308b:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_116_sort_array.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_116_sort_array", "test": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n}\n"}
{"name": "HumanEval_28_concatenate", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u306e\u914d\u5217\u30ea\u30b9\u30c8\u30921\u3064\u306e\u6587\u5b57\u5217\u306b\u9023\u7d50\u3059\u308b\u3002\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_28_concatenate.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"k\"}))) == (\"xyzwk\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_28_concatenate", "test": "}\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"k\"}))) == (\"xyzwk\"));\n}\n"}
{"name": "HumanEval_149_sorted_list_sum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u306evector\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u305d\u3053\u304b\u3089\u9577\u3055\u304c\u5947\u6570\u306e\u6587\u5b57\u5217\u3092\u524a\u9664\u3057\u3001\n// \u305d\u306e\u7d50\u679c\u306evector\u3092\u30bd\u30fc\u30c8\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// vector\u306f\u5e38\u306b\u6587\u5b57\u5217\u306evector\u3067\u3042\u308a\u3001\u6c7a\u3057\u3066\u6570\u5024\u306evector\u3067\u306f\u306a\u3044\u3002\n// vector\u306e\u4e26\u3073\u9806\u306f\u5404\u5358\u8a9e\u306e\u9577\u3055\u306e\u6607\u9806\u3068\u3057\u3001\u305d\u306e\u30eb\u30fc\u30eb\u3067\u30bd\u30fc\u30c8\u3057\u305fvector\u3092\u8fd4\u3059\u3002\n// 2\u3064\u306e\u5358\u8a9e\u306e\u9577\u3055\u304c\u540c\u3058\u5834\u5408\u306f\u3001vector\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002\n// \u3053\u306e\u95a2\u6570\u306f\u3001\u6587\u5b57\u5217\u3092\u30bd\u30fc\u30c8\u3057\u305fvector\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n// \u3059\u3079\u3066\u306e\u5358\u8a9e\u306e\u9577\u3055\u306f\u540c\u3058\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n// \u4f8b\u3048\u3070:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\", (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_149_sorted_list_sum", "test": "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\", (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n"}
{"name": "HumanEval_7_filter_by_substring", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u306e\u5165\u529bvector\u304b\u3089\u3001\u6307\u5b9a\u3057\u305f\u90e8\u5206\u6587\u5b57\u5217\u3092\u542b\u3080\u3082\u306e\u3060\u3051\u3092\u7d5e\u308a\u8fbc\u3080\u3002\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_7_filter_by_substring.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"prune\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_7_filter_by_substring", "test": "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"prune\"})));\n}\n"}
{"name": "HumanEval_99_closest_integer", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6570\u5024\u3092\u8868\u3059\u5024\uff08\u6587\u5b57\u5217\uff09\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u308c\u306b\u6700\u3082\u8fd1\u3044\u6574\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3002\n// 2\u3064\u306e\u6574\u6570\u304b\u3089\u7b49\u8ddd\u96e2\u306b\u3042\u308b\u5834\u5408\u306f\u3001\u30bc\u30ed\u304b\u3089\u56db\u6368\u4e94\u5165\u3059\u308b\u3002\n// \u4f8b\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// \u6ce8:\n// \u30bc\u30ed\u304b\u3089\u306e\u56db\u6368\u4e94\u5165\u3068\u306f\u3001\n// \u4e0e\u3048\u3089\u308c\u305f\u6570\u5024\u304c2\u3064\u306e\u6574\u6570\u304b\u3089\u7b49\u8ddd\u96e2\u306b\u3042\u308b\u5834\u5408\u3001\u8fd4\u3059\u3079\u304d\u306f\u30bc\u30ed\u304b\u3089\u6700\u3082\u9060\u3044\u65b9\u3067\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\n// \u4f8b\u3048\u3070\u3001 closest_integer(\"14.5\") \u306f15\u3092\u8fd4\u3059\u3002closest_integer(\"-14.5\")\u306f-15\u3092\u8fd4\u3059\u3002\nlong closest_integer(std::string value) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_99_closest_integer.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_99_closest_integer", "test": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"}
{"name": "HumanEval_64_vowels_count", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5358\u8a9e\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3057\u3001\u305d\u306e\u6587\u5b57\u5217\u306b\u542b\u307e\u308c\u308b\u6bcd\u97f3\u306e\u6570\u3092\u8fd4\u3059\u95a2\u6570 vowels_count \u3092\u66f8\u304f\u3002\n// \u6bcd\u97f3\u306f'a', 'e', 'i', 'o', 'u'\u3067\u3042\u308b\u3002\n// 'y'\u3082\u6bcd\u97f3\u3067\u3042\u308b\u304c\u3001\u3053\u308c\u306f\u4e0e\u3048\u3089\u308c\u305f\u5358\u8a9e\u306e\u672b\u5c3e\u306b\u3042\u308b\u5834\u5408\u306e\u307f\u3067\u3042\u308b\u3002\n// \u4f8b:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_64_vowels_count.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"ACEDY\")) == (3));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_64_vowels_count", "test": "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"ACEDY\")) == (3));\n}\n"}
{"name": "HumanEval_158_find_max", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217\u306evector\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// vector\u306f\u7570\u306a\u308b\u5358\u8a9e\u3092\u542b\u3080\u3002\u6700\u5927\u30e6\u30cb\u30fc\u30af\u6587\u5b57\u6570\u3092\u6301\u3064\u5358\u8a9e\u3092\u8fd4\u3059\u3002\n// \u8907\u6570\u306e\u6587\u5b57\u5217\u304c\u6700\u5927\u30e6\u30cb\u30fc\u30af\u6587\u5b57\u6570\u3092\u6301\u3064\u5834\u5408\u3001\u8907\u6570\u306e\u6587\u5b57\u5217\u304c\u4e00\u610f\u306a\u6700\u5927\u6587\u5b57\u6570\u3092\u6301\u3064\u5834\u5408\u3001\u8f9e\u66f8\u7684\u9806\u5e8f\u3067\u6700\u521d\u306b\u6765\u308b\u3082\u306e\u3092\u8fd4\u3059\u3002\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_158_find_max.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_158_find_max", "test": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"}
{"name": "HumanEval_162_string_to_md5", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6587\u5b57\u5217 'text' \u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u305d\u306e md5 \u30cf\u30c3\u30b7\u30e5\u3068\u7b49\u4fa1\u306a\u6587\u5b57\u5217\u3092\u8fd4\u3059\u3002\n// text' \u304c\u7a7a\u6587\u5b57\u5217\u306e\u5834\u5408\u306f\u7a7a\u3092\u8fd4\u3059\u3002\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_162_string_to_md5.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_162_string_to_md5", "test": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n"}
{"name": "HumanEval_44_change_base", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5165\u529b\u6570\u5024x\u306e\u57fa\u6570\u3092base\u306b\u5909\u66f4\u3059\u308b\u3002\n// \u5909\u63db\u5f8c\u306e\u6587\u5b57\u5217\u8868\u73fe\u3092\u8fd4\u3059\u3002\n// \u57fa\u6570\u306f10\u3088\u308a\u5c0f\u3055\u3044\u3002\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_44_change_base.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_44_change_base", "test": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"}
{"name": "HumanEval_157_right_angle_triangle", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e09\u89d2\u5f62\u306e3\u8fba\u306e\u9577\u3055\u304c\u4e0e\u3048\u3089\u308c\u308b\u30023\u8fba\u304c\u76f4\u89d2\u4e09\u89d2\u5f62\u3092\u5f62\u6210\u3057\u3066\u3044\u308c\u3070\u771f\u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u507d\u3092\u8fd4\u3059\u3002\n// \u76f4\u89d2\u4e09\u89d2\u5f62\u3068\u306f\u30011\u3064\u306e\u89d2\u304c\u76f4\u89d2\u307e\u305f\u306f 90\u5ea6\u3067\u3042\u308b\u3002\n// \u4f8b:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_157_right_angle_triangle", "test": "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"}
{"name": "HumanEval_81_numerical_letter_grade", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5b66\u671f\u6700\u7d42\u9031\u3001\u6559\u5e2b\u306f\u751f\u5f92\u306b\u6210\u7e3e\u3092\u3064\u3051\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n// \u5148\u751f\u306f\u63a1\u70b9\u7528\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u81ea\u4f5c\u3057\u3066\u3044\u308b\u3002\n// \u552f\u4e00\u306e\u554f\u984c\u306f\u3001\u5148\u751f\u304c\u6210\u7e3e\u8a55\u4fa1\u306b\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3092\u7d1b\u5931\u3057\u3066\u3057\u307e\u3063\u305f\u3053\u3068\u3067\u3059\u3002\n// \u5148\u751f\u306f\u4f55\u4eba\u304b\u306e\u751f\u5f92\u306e\u6210\u7e3e\u8a55\u4fa1\u306evector\u3092\u3042\u306a\u305f\u306b\u6e21\u3057\u307e\u3057\u305f\u3002\n// \u6b21\u306e\u8868\u3092\u4f7f\u3063\u3066\u3001\u6587\u5b57\u6210\u7e3e\u306evector\u3092\u51fa\u529b\u3067\u304d\u308b\u95a2\u6570\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff1a\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// \u4f8b:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_81_numerical_letter_grade.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_81_numerical_letter_grade", "test": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n"}
{"name": "HumanEval_5_intersperse", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u5165\u529bvector `numbers' \u306e\u9023\u7d9a\u3059\u308b2\u3064\u306e\u8981\u7d20\u306e\u9593\u306b\u6570\u5024 'delimeter' \u3092\u633f\u5165\u3059\u308b\u3002\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_5_intersperse.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_5_intersperse", "test": "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));\n}\n"}
{"name": "HumanEval_146_specialFilter", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6570\u5024\u306evector\u3092\u5165\u529b\u3068\u3057\u3001\u305d\u306evector\u306e\u8981\u7d20\u306e\u3046\u3061\u300110\u3088\u308a\u5927\u304d\u304f\u3001\u304b\u3064\u3001\n// \u6570\u5024\u306e\u6700\u521d\u3068\u6700\u5f8c\u306e\u6841\u306e\u4e21\u65b9\u304c\u5947\u6570\uff081, 3, 5, 7, 9\uff09\u3067\u3042\u308b\u3082\u306e\u306e\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u306a\u3055\u3044\u3002\n// \u4f8b\u3048\u3070:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_146_specialFilter.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_146_specialFilter", "test": "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"}
{"name": "HumanEval_60_sum_to_n", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n\u306f1\u304b\u3089n\u307e\u3067\u306e\u6570\u5024\u3092\u5408\u8a08\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u3002\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_60_sum_to_n.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1)) == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_60_sum_to_n", "test": "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1)) == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n}\n"}
{"name": "HumanEval_26_remove_duplicates", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6574\u6570\u306evector\u304b\u3089\u3001\u8907\u6570\u56de\u51fa\u73fe\u3059\u308b\u8981\u7d20\u3092\u3059\u3079\u3066\u53d6\u308a\u9664\u304f\u3002\n// \u6b8b\u3055\u308c\u305f\u8981\u7d20\u306e\u9806\u5e8f\u306f\u5165\u529b\u3068\u540c\u3058\u306b\u4fdd\u3064\u3002\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_26_remove_duplicates.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_26_remove_duplicates", "test": "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n}\n"}
{"name": "HumanEval_163_generate_integers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u6b63\u306e\u6574\u6570a\u3068b\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001a\u3068b\u306e\u9593\u306e\u5076\u6570\u6841\u3092\u6607\u9806\u306b\u8fd4\u3059\u3002\n// \u4f8b\u3048\u3070:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_163_generate_integers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = generate_integers;\n    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((17), (89)) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_163_generate_integers", "test": "}\nint main() {\n    auto candidate = generate_integers;\n    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((17), (89)) == (std::vector<long>()));\n}\n"}
{"name": "HumanEval_9_rolling_max", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306evector\u304b\u3089\u3001vector\u306e\u4e0e\u3048\u3089\u308c\u305f\u6642\u70b9\u307e\u3067\u306b\u898b\u3064\u304b\u3063\u305f\u6700\u5927\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308bvector\u3092\u751f\u6210\u3059\u308b\u3002\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_9_rolling_max.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_9_rolling_max", "test": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n"}
{"name": "HumanEval_3_below_zero", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b8b\u9ad8\u30bc\u30ed\u3067\u59cb\u307e\u308b\u9280\u884c\u53e3\u5ea7\u306b\u5bfe\u3059\u308b\u5165\u51fa\u91d1\u64cd\u4f5c\u306evector\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n// \u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u53e3\u5ea7\u306e\u6b8b\u9ad8\u304c\u30bc\u30ed\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n// \u305d\u306e\u6642\u70b9\u3067\u95a2\u6570\u306f\u771f\u3092\u8fd4\u3059\u3002\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f false \u3092\u8fd4\u3059\u3002\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_3_below_zero.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_3_below_zero", "test": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n"}
{"name": "HumanEval_69_search", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u6b63\u306e\u6574\u6570\u306e\u7a7a\u3067\u306a\u3044vector\u304c\u4e0e\u3048\u3089\u308c\u308b\u30020 \u3088\u308a\u5927\u304d\u304f\u3001\u304b\u3064\u305d\u306e\u6574\u6570\u81ea\u4f53\u306e\u5024\u4ee5\u4e0a\u306e\u983b\u5ea6\u3092\u6301\u3064\u6700\u5927\u306e\u6574\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n// \u6574\u6570\u306e\u983b\u5ea6\u3068\u306f\u3001\u305d\u308c\u304cvector\u306b\u73fe\u308c\u308b\u56de\u6570\u3067\u3042\u308b\u3002\n// \u5024\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f -1 \u3092\u8fd4\u3059\u3002\n// \u4f8b:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_69_search.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_69_search", "test": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"}
{"name": "HumanEval_61_correct_bracketing", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u62ec\u5f27\u306f\u300c(\u300d\u3068\u300c) \u300d\u306e\u6587\u5b57\u5217\u3067\u3042\u308b\u3002\n// \u3059\u3079\u3066\u306e\u958b\u62ec\u5f27\u306b\u5bfe\u5fdc\u3059\u308b\u9589\u62ec\u5f27\u304c\u3042\u308c\u3070\u771f\u3092\u8fd4\u3059\u3002\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_61_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_61_correct_bracketing", "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"}
{"name": "HumanEval_37_sort_even", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u3053\u306e\u95a2\u6570\u306f\u3001vector l\u3092\u53d7\u3051\u53d6\u308a\u3001vector l'\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n// l'\u306e\u5947\u6570\u756a\u76ee\u306e\u7d22\u5f15\u306fvector l\u306e\u7d22\u5f15\u3068\u540c\u3058\u5024\u3067\u3042\u308a\u3001\u5076\u6570\u756a\u76ee\u306e\u5024\u306fl\u3092\u30bd\u30fc\u30c8\u3057\u305fvector\u306e\u7d22\u5f15\u306e\u5024\u304c\u5165\u308a\u307e\u3059\u3002\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_37_sort_even.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_37_sort_even", "test": "}\nint main() {\n    auto candidate = sort_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));\n}\n"}
{"name": "HumanEval_54_same_chars", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// 2\u3064\u306e\u5358\u8a9e\u304c\u540c\u3058\u6587\u5b57\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_54_same_chars.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"), (\"aaccc\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_54_same_chars", "test": "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"), (\"aaccc\")) == (false));\n}\n"}
{"name": "HumanEval_56_correct_bracketing", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \u62ec\u5f27\u306f\u300c<\u300d\u3068\u300c>\u300d\u306e\u6587\u5b57\u5217\u3067\u3042\u308b\u3002\n// \u3059\u3079\u3066\u306e\u958b\u304d\u62ec\u5f27\u304c\u5bfe\u5fdc\u3059\u308b\u9589\u3058\u62ec\u5f27\u3092\u6301\u3064\u5834\u5408\u3001\u771f\u3092\u8fd4\u3059\u3002\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_56_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n", "stop_tokens": ["\n}"], "task_id": "HumanEval_56_correct_bracketing", "test": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"}
